[{"F:\\Dev\\MyWebApp\\toper\\src\\index.tsx":"1","F:\\Dev\\MyWebApp\\toper\\src\\BodyWidget.tsx":"2","F:\\Dev\\MyWebApp\\toper\\src\\components\\CanvasDiagram.tsx":"3","F:\\Dev\\MyWebApp\\toper\\src\\defaultData\\defaultScheme.js":"4","F:\\Dev\\MyWebApp\\toper\\src\\components\\NavbarEditor.tsx":"5","F:\\Dev\\MyWebApp\\toper\\src\\components\\SchemaEditor.js":"6","F:\\Dev\\MyWebApp\\toper\\src\\store.js":"7","F:\\Dev\\MyWebApp\\toper\\src\\App.tsx":"8","F:\\Dev\\MyWebApp\\toper\\src\\libs\\engine.ts":"9","F:\\Dev\\MyWebApp\\toper\\src\\custom-node-ts\\TSCustomNodeModel.ts":"10","F:\\Dev\\MyWebApp\\toper\\src\\components\\Appbar.tsx":"11","F:\\Dev\\MyWebApp\\toper\\src\\components\\TabMat.tsx":"12","F:\\Dev\\MyWebApp\\toper\\src\\components\\TabMenu.tsx":"13","F:\\Dev\\MyWebApp\\toper\\src\\components\\Toolbar.tsx":"14","F:\\Dev\\MyWebApp\\toper\\src\\schemanode\\node\\SchemaNodeModel.ts":"15","F:\\Dev\\MyWebApp\\toper\\src\\schemanode\\port\\SchemaPortModel.ts":"16","F:\\Dev\\MyWebApp\\toper\\src\\schemanode\\node\\SchemaNodeFactory.tsx":"17","F:\\Dev\\MyWebApp\\toper\\src\\schemanode\\node\\SchemaNodeWidget.tsx":"18","F:\\Dev\\MyWebApp\\toper\\src\\schemanode\\port\\SchemaPortLabelWidget.tsx":"19","F:\\Dev\\MyWebApp\\toper\\src\\components\\AppToolbar.tsx":"20","F:\\Dev\\MyWebApp\\toper\\src\\components\\TableEditor.tsx":"21","F:\\Dev\\MyWebApp\\toper\\src\\components\\FileMenu.tsx":"22","F:\\Dev\\MyWebApp\\toper\\src\\components\\ContextMenus\\ContextMenuShortcutContainer.jsx":"23","F:\\Dev\\MyWebApp\\toper\\src\\components\\ContextMenus\\ContextMenuIconContainer.jsx":"24","F:\\Dev\\MyWebApp\\toper\\src\\components\\ContextMenus\\KeyMenu.jsx":"25","F:\\Dev\\MyWebApp\\toper\\src\\components\\Icons\\index.js":"26","F:\\Dev\\MyWebApp\\toper\\src\\components\\Icons\\ZoomOut.jsx":"27","F:\\Dev\\MyWebApp\\toper\\src\\components\\Icons\\Undo.jsx":"28","F:\\Dev\\MyWebApp\\toper\\src\\components\\Icons\\ZoomIn.jsx":"29","F:\\Dev\\MyWebApp\\toper\\src\\components\\Icons\\Settings.jsx":"30","F:\\Dev\\MyWebApp\\toper\\src\\components\\Icons\\Stop.jsx":"31","F:\\Dev\\MyWebApp\\toper\\src\\components\\Icons\\Redo.jsx":"32","F:\\Dev\\MyWebApp\\toper\\src\\components\\Icons\\Duplicate.jsx":"33","F:\\Dev\\MyWebApp\\toper\\src\\components\\Icons\\Play.jsx":"34","F:\\Dev\\MyWebApp\\toper\\src\\components\\Icons\\Pause.jsx":"35","F:\\Dev\\MyWebApp\\toper\\src\\components\\Icons\\Paste.jsx":"36","F:\\Dev\\MyWebApp\\toper\\src\\components\\Icons\\Cut.jsx":"37","F:\\Dev\\MyWebApp\\toper\\src\\components\\Icons\\Copy.jsx":"38","F:\\Dev\\MyWebApp\\toper\\src\\components\\Icons\\Close.jsx":"39","F:\\Dev\\MyWebApp\\toper\\src\\components\\Icons\\Edit.jsx":"40","F:\\Dev\\MyWebApp\\toper\\src\\components\\Icons\\Delete.jsx":"41","F:\\Dev\\MyWebApp\\toper\\src\\components\\Icons\\ArrowRight.jsx":"42","F:\\Dev\\MyWebApp\\toper\\src\\components\\Icons\\Chevron.jsx":"43","F:\\Dev\\MyWebApp\\toper\\src\\components\\Icons\\Chevrons.jsx":"44","F:\\Dev\\MyWebApp\\toper\\src\\components\\Icons\\ArrowLeft.jsx":"45","F:\\Dev\\MyWebApp\\toper\\src\\DiagramController\\DiagramCtr.tsx":"46","F:\\Dev\\MyWebApp\\toper\\src\\DiagramController\\actions\\ClipboardAction.js":"47","F:\\Dev\\MyWebApp\\toper\\src\\components\\ContextMenus\\ContextMenus.tsx":"48","F:\\Dev\\MyWebApp\\toper\\src\\components\\ContextMenus\\ComponentContextMenu.tsx":"49","F:\\Dev\\MyWebApp\\toper\\src\\components\\ContextMenus\\DiagramContextMenu.tsx":"50","F:\\Dev\\MyWebApp\\toper\\src\\DiagramController\\actions\\DeleteAction.ts":"51","F:\\Dev\\MyWebApp\\toper\\src\\DiagramController\\actions\\NewNodeAction.ts":"52","F:\\Dev\\MyWebApp\\toper\\src\\DiagramController\\actions\\DuplicateAction.ts":"53","F:\\Dev\\MyWebApp\\toper\\src\\components\\ExportEditor.tsx":"54","F:\\Dev\\MyWebApp\\toper\\src\\DiagramController\\actions\\ZoomAction.ts":"55","F:\\Dev\\MyWebApp\\toper\\src\\DiagramController\\actions\\Clipboard.ts":"56","F:\\Dev\\MyWebApp\\toper\\src\\components\\ContextMenus\\SimpleContext.tsx":"57"},{"size":255,"mtime":1613050996632,"results":"58","hashOfConfig":"59"},{"size":388,"mtime":1612249709457,"results":"60","hashOfConfig":"59"},{"size":1450,"mtime":1613317001202,"results":"61","hashOfConfig":"59"},{"size":187,"mtime":1612323376670,"results":"62","hashOfConfig":"59"},{"size":1762,"mtime":1612844508056,"results":"63","hashOfConfig":"59"},{"size":4362,"mtime":1612676179331,"results":"64","hashOfConfig":"59"},{"size":368,"mtime":1612544460601,"results":"65","hashOfConfig":"59"},{"size":6026,"mtime":1613748808419,"results":"66","hashOfConfig":"59"},{"size":2217,"mtime":1613652003431,"results":"67","hashOfConfig":"59"},{"size":877,"mtime":1612576686001,"results":"68","hashOfConfig":"59"},{"size":2242,"mtime":1613358646902,"results":"69","hashOfConfig":"59"},{"size":2131,"mtime":1612713948794,"results":"70","hashOfConfig":"59"},{"size":985,"mtime":1612695004123,"results":"71","hashOfConfig":"59"},{"size":2870,"mtime":1613748749234,"results":"72","hashOfConfig":"59"},{"size":9851,"mtime":1613730154649,"results":"73","hashOfConfig":"59"},{"size":1083,"mtime":1613219467079,"results":"74","hashOfConfig":"59"},{"size":841,"mtime":1613099389316,"results":"75","hashOfConfig":"59"},{"size":3413,"mtime":1613623078988,"results":"76","hashOfConfig":"59"},{"size":1299,"mtime":1613747580415,"results":"77","hashOfConfig":"59"},{"size":1519,"mtime":1613301988506,"results":"78","hashOfConfig":"59"},{"size":12337,"mtime":1613659134299,"results":"79","hashOfConfig":"59"},{"size":3195,"mtime":1613028525561,"results":"80","hashOfConfig":"59"},{"size":222,"mtime":1613044669211,"results":"81","hashOfConfig":"59"},{"size":231,"mtime":1613044670610,"results":"82","hashOfConfig":"59"},{"size":638,"mtime":1613044719437,"results":"83","hashOfConfig":"59"},{"size":786,"mtime":1608105596000,"results":"84","hashOfConfig":"59"},{"size":375,"mtime":1608105596000,"results":"85","hashOfConfig":"59"},{"size":896,"mtime":1608105596000,"results":"86","hashOfConfig":"59"},{"size":417,"mtime":1608105596000,"results":"87","hashOfConfig":"59"},{"size":1034,"mtime":1608105596000,"results":"88","hashOfConfig":"59"},{"size":1055,"mtime":1608105596000,"results":"89","hashOfConfig":"59"},{"size":780,"mtime":1608105596000,"results":"90","hashOfConfig":"59"},{"size":1361,"mtime":1608105596000,"results":"91","hashOfConfig":"59"},{"size":401,"mtime":1608105596000,"results":"92","hashOfConfig":"59"},{"size":433,"mtime":1608105596000,"results":"93","hashOfConfig":"59"},{"size":1692,"mtime":1608105596000,"results":"94","hashOfConfig":"59"},{"size":455,"mtime":1608105596000,"results":"95","hashOfConfig":"59"},{"size":372,"mtime":1608105596000,"results":"96","hashOfConfig":"59"},{"size":681,"mtime":1608105596000,"results":"97","hashOfConfig":"59"},{"size":439,"mtime":1608105596000,"results":"98","hashOfConfig":"59"},{"size":466,"mtime":1608105596000,"results":"99","hashOfConfig":"59"},{"size":367,"mtime":1608105596000,"results":"100","hashOfConfig":"59"},{"size":255,"mtime":1608105596000,"results":"101","hashOfConfig":"59"},{"size":383,"mtime":1608105596000,"results":"102","hashOfConfig":"59"},{"size":314,"mtime":1608105596000,"results":"103","hashOfConfig":"59"},{"size":5638,"mtime":1613746913275,"results":"104","hashOfConfig":"59"},{"size":2784,"mtime":1608105596000,"results":"105","hashOfConfig":"59"},{"size":760,"mtime":1613747205231,"results":"106","hashOfConfig":"59"},{"size":3276,"mtime":1613747181852,"results":"107","hashOfConfig":"59"},{"size":1788,"mtime":1613748446771,"results":"108","hashOfConfig":"59"},{"size":971,"mtime":1613061340964,"results":"109","hashOfConfig":"59"},{"size":1287,"mtime":1613318798129,"results":"110","hashOfConfig":"59"},{"size":1353,"mtime":1613061622164,"results":"111","hashOfConfig":"59"},{"size":3316,"mtime":1613280825495,"results":"112","hashOfConfig":"59"},{"size":2603,"mtime":1613316168409,"results":"113","hashOfConfig":"59"},{"size":2936,"mtime":1613734680164,"results":"114","hashOfConfig":"59"},{"size":1520,"mtime":1613748533886,"results":"115","hashOfConfig":"59"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"119"},"1qj6m5i",{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"133"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"137"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"119"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"119"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"119"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"154","messages":"155","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"119"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"119"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"119"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"119"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"119"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":39,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"119"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"119"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"119"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"119"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"119"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"119"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"119"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"119"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"119"},"F:\\Dev\\MyWebApp\\toper\\src\\index.tsx",["259","260"],"\n\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport {App} from './App'\n\nReactDOM.render(   \n    <App/>\n,\n  document.getElementById('root')\n);\n\n",["261","262"],"F:\\Dev\\MyWebApp\\toper\\src\\BodyWidget.tsx",[],["263","264"],"F:\\Dev\\MyWebApp\\toper\\src\\components\\CanvasDiagram.tsx",[],"F:\\Dev\\MyWebApp\\toper\\src\\defaultData\\defaultScheme.js",[],"F:\\Dev\\MyWebApp\\toper\\src\\components\\NavbarEditor.tsx",[],["265","266"],"F:\\Dev\\MyWebApp\\toper\\src\\components\\SchemaEditor.js",["267","268","269","270","271","272","273"],"import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport TableMat from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport TableChartIcon from '@material-ui/icons/TableChart';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\r\n\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\n\r\n\r\nimport { useDispatch , useSelector } from \"react-redux\"\r\nimport Tabmat from './TabMat'\r\nimport Appbar from './Appbar'\r\nimport {initEngine , newNode} from '../libs/schemeReduce'\r\nimport {OpenEditor , Table , NewNode} from '../libs/tablereducer'\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  list: {\r\n    width: 500,\r\n  },\r\n  fullList: {\r\n    width: 'auto',\r\n  },\r\n});\r\n\r\nfunction createData(Name, TypeName, PK, FK) {\r\n  return { Name, TypeName, PK, FK };\r\n}\r\n\r\nconst rows = [\r\n  createData('Product Id', \"varchar\", false, false),\r\n  createData('Product Name', \"varchar\", false , false),\r\n  createData('Product Price', \"int\", false , false),\r\n\r\n];\r\n\r\n//const engine = useSelector(\r\n  //  (state: RootState) => state.schemeReducer.engine\r\n  //);\r\n\r\n\r\nfunction getCurrentNode(){\r\n\r\n}\r\n\r\n\r\nexport default function TemporaryDrawer() {\r\n  const dispatch = useDispatch()\r\n  const classes = useStyles();\r\n  const [state, setState] = React.useState({\r\n    top: false,\r\n    left: false,\r\n    bottom: false,\r\n    right: false,\r\n  });\r\n\r\n  const tableform = {\r\n    table_name : \"\",\r\n    node_id : \"\",\r\n    fields : []\r\n  }\r\n\r\n\r\n  //const [state, setstate] = useState()\r\n\r\n  //const currentSelect = useSelector(state => state.schemaEditor.isOpen)\r\nconst currentSelect = false\r\n\r\n  const toggleDrawer = (anchor, open) => (event) => {\r\n    console.log(\"toggle\")\r\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n      return;\r\n    }\r\n\r\n    setState({ ...state, [anchor]: open });\r\n  };\r\n\r\n  const list = (anchor) => (\r\n    <div\r\n      className={clsx(classes.list, {\r\n        [classes.fullList]: anchor === 'top' || anchor === 'bottom',\r\n      })}\r\n      role=\"presentation\"\r\n      onClick={toggleDrawer(anchor, false)}\r\n      onKeyDown={toggleDrawer(anchor, false)}\r\n    >\r\n      <Appbar></Appbar>\r\n       <TableContainer>\r\n      <TableMat aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Field Name</TableCell>\r\n            <TableCell>Type Name</TableCell>\r\n            <TableCell>PK</TableCell>\r\n            <TableCell>FK</TableCell>\r\n\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.map((row) => (\r\n            <TableRow key={row.name}>\r\n              {(row) ? <TableCell component=\"th\" scope=\"row\"> {row.Name}\r\n              </TableCell> : <div>Edit</div>} \r\n               \r\n              \r\n              <TableCell >{row.TypeName}</TableCell>\r\n              <TableCell >{row.PK}</TableCell>\r\n              <TableCell >{row.FK}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </TableMat>\r\n    </TableContainer>\r\n    <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\r\n          <AddCircleOutlineIcon />\r\n        </IconButton>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <Tabmat></Tabmat>\r\n      <Button onClick={toggleDrawer(\"right\", true)}  startIcon={<TableChartIcon />} onClick={() => dispatch(NewNode(tableform))}>New Table</Button>\r\n      <Button startIcon={<SaveIcon />}>Save File</Button>\r\n      <Button startIcon={<ArrowDownwardIcon />} onClick={() => dispatch(OpenEditor(true))}>Export {currentSelect}</Button>\r\n      <Button startIcon={<ShareIcon />} >Share File</Button>\r\n          <Drawer anchor={\"right\"} open={false} onClose={()=> dispatch(OpenEditor(true))}>\r\n            {list(\"right\")}\r\n          </Drawer>\r\n\r\n    </div>\r\n \r\n  );\r\n}",["274","275"],"F:\\Dev\\MyWebApp\\toper\\src\\store.js",["276","277"],"import { configureStore } from '@reduxjs/toolkit';\r\n\r\n\r\nimport SchemaEditor from './libs/schemaEditorReducer'\r\n\r\nimport SchemaReducer from './libs/schemeReduce'\r\nimport TableReducer from './libs/tablereducer'\r\nimport Dummay from './libs/dummyreducer'\r\nexport default configureStore({\r\n  reducer: {\r\n    \r\n    dummy : Dummay,\r\n    tablereducer : TableReducer\r\n  },\r\n});",["278","279"],"F:\\Dev\\MyWebApp\\toper\\src\\App.tsx",["280","281","282","283","284","285","286","287","288"],"import React, { FunctionComponent, useEffect , useState } from 'react'\r\n\r\n\r\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\r\n\r\nimport { DemoCanvasWidget } from './components/CanvasDiagram';\r\n\r\n\r\nimport { Toolbar } from './components/Toolbar'\r\nimport { AppToolbar } from './components/AppToolbar'\r\nimport {  DiagramModel } from \"@projectstorm/react-diagrams\";\r\n\r\nimport { ExportEditor } from './components/ExportEditor'\r\nimport { FileMenu } from './components/FileMenu'\r\n\r\nimport { ContextMenus } from './components/ContextMenus/ContextMenus'\r\nimport { Menu, MenuProvider } from 'react-contexify';\r\n\r\nimport { DiagramController } from './DiagramController/DiagramCtr'\r\nimport { TableEditor } from './components/TableEditor'\r\n\r\nimport SimpleContext from './components/ContextMenus/SimpleContext'\r\nimport * as htmlToImage from 'html-to-image';\r\n\r\nexport const App: FunctionComponent = () => {\r\n\r\n\tconst [update, setupdate] = useState(false)\r\n\r\n\tconst [diagram, setDiagram] = useState(new DiagramController())\r\n\r\n\tconst [isExportOpen, setisExportOpen] = useState(false)\r\n\r\n\tconst [saveData, setsaveData] = useState(\"\")\r\n\r\n\tconst [isEdit, setEdit] = useState(false)\r\n\r\n\tuseEffect(() => {\r\n\t\tconsole.log('start app')\r\n\t\tdiagram.getEngine().registerListener({\r\n\t\t\tonDoubleClick: () => ToggleEditor()\r\n\t\t})\r\n\t}, [])\r\n\r\n\tfunction exportPng() {\r\n\r\n\t\tlet node = document.getElementById('diagramcv');\r\n\t\tif (node == null) return\r\n\t\thtmlToImage.toPng(node)\r\n\t\t\t.then(function (dataUrl) {\r\n\t\t\t\tvar img = new Image();\r\n\t\t\t\timg.src = dataUrl;\r\n\t\t\t\tvar a = document.createElement('a');\r\n\t\t\t\t// toDataURL defaults to png, so we need to request a jpeg, then convert for file download.\r\n\t\t\t\ta.href = dataUrl\r\n\t\t\t\ta.download = 'somefilename.png';\r\n\t\t\t\ta.click();\r\n\t\t\t})\r\n\t\t\t.catch(function (error) {\r\n\t\t\t\tconsole.error('oops, something went wrong!', error);\r\n\t\t\t});\r\n\t}\r\n\r\n\tfunction exportPdf() {\r\n\r\n\t\tlet node = document.getElementById('diagramcv');\r\n\t\tif (node == null) return\r\n\t\thtmlToImage.toPng(node)\r\n\t\t\t.then(function (dataUrl) {\r\n\t\t\t\tvar img = new Image();\r\n\t\t\t\timg.src = dataUrl;\r\n\t\t\t\tvar a = document.createElement('a');\r\n\t\t\t\t// toDataURL defaults to png, so we need to request a jpeg, then convert for file download.\r\n\t\t\t\ta.href = dataUrl\r\n\t\t\t\ta.download = 'somefilename.png';\r\n\t\t\t\ta.click();\r\n\t\t\t})\r\n\t\t\t.catch(function (error) {\r\n\t\t\t\tconsole.error('oops, something went wrong!', error);\r\n\t\t\t});\r\n\t}\r\n\r\n\tfunction openExport() { setisExportOpen(true) }\r\n\r\n\tfunction ToggleEditor() {\r\n\t\tsetEdit(!isEdit)\r\n\t}\r\n\r\n\tfunction onZoomIn() {\r\n\t\talert('zoom in ')\r\n\t\t//diagram.zoomIn({})\r\n\t\t//diagram.getEngine().\r\n\t}\r\n\r\n\tfunction onZoomOut() {\r\n\t\talert('zoom out ')\r\n\r\n\t\t//diagram.zoomIn({})\r\n\t}\r\n\r\n\tfunction onZoomFit() {\r\n\t\talert('zoom fit ')\r\n\t\tdiagram.getEngine().zoomToFit()\r\n\t}\r\n\r\n\tfunction newTable() {\r\n\t\tdiagram.newNode()\r\n\t}\r\n\r\n\tfunction saveSerial() {\r\n\t\tlet modelJson = diagram.getEngine().getModel().serialize()\r\n\r\n\t\tlet modelStr = JSON.stringify(modelJson)\r\n\r\n\t\tsetsaveData(modelStr)\r\n\r\n\t\tconsole.log(modelJson)\r\n\r\n\t\tvar a = document.createElement('a');\r\n\t\t// toDataURL defaults to png, so we need to request a jpeg, then convert for file download.\r\n\t\ta.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(modelStr));\r\n\t\ta.setAttribute('download', \"myer.er\");\r\n\r\n\t\ta.style.display = 'none';\r\n\t\tdocument.body.appendChild(a);\r\n\r\n\t\ta.click();\r\n\r\n\t\tdocument.body.removeChild(a);\r\n\t}\r\n\r\n\r\n\r\n\tfunction testLink() {\r\n\t\tdiagram.linktest()\r\n\t}\r\n\r\n\tfunction loadOpenFile() {\r\n\t\tvar elem = document.getElementById(\"fileinput\");\r\n\t\tif (elem && document.createEvent) {\r\n\t\t\tvar evt = document.createEvent(\"MouseEvents\");\r\n\t\t\tevt.initEvent(\"click\", true, false);\r\n\t\t\telem.dispatchEvent(evt);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction onLoadFile(e: any) {\r\n\t\talert(\"select\")\r\n\t\tvar input = e.target;\r\n\t\tconsole.log(e)\r\n\t\tvar reader = new FileReader();\r\n\t\treader.onload = (es) => {\r\n\t\t\tvar text: any = reader.result;\r\n\r\n\t\t\tconsole.log(text)\r\n\t\t\tlet model2 = new DiagramModel()\r\n\t\t\tlet obj: ReturnType<DiagramModel['serialize']> = JSON.parse(text);\r\n\t\t\tmodel2.deserializeModel(obj, diagram.engine)\r\n\t\t\tif (model2 == null) {\r\n\t\t\t\tconsole.log(\"model null\")\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\te.target.value = null\r\n\t\t\tdiagram.getEngine().setModel(model2)\r\n\r\n\t\t};\r\n\t\treader.readAsText(input.files[0]);\r\n\t}\r\n\r\n\tfunction loadSerial() {\r\n\r\n\t\tif (saveData == \"\") return\r\n\t\tlet str = saveData\r\n\t\tlet model2 = new DiagramModel()\r\n\t\tlet obj: ReturnType<DiagramModel['serialize']> = JSON.parse(str);\r\n\t\tmodel2.deserializeModel(obj, diagram.engine)\r\n\t\tif (model2 == null) {\r\n\t\t\tconsole.log(\"model null\")\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tdiagram.getEngine().setModel(model2)\r\n\t\ttogglePropUpdate()\r\n\t\tconsole.log(\"load sucess\")\r\n\t}\r\n\r\n\tfunction togglePropUpdate() {\r\n\t\tsetupdate(!update)\r\n\t}\r\n\r\n\tfunction zoomIn() {diagram.doZoom(20)}\r\n\r\n\tfunction zoomOut() {diagram.doZoom(-20)}\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\r\n\t\t\t<AppToolbar onExport={openExport}></AppToolbar>\r\n\t\t\t<Toolbar onZoomIn={zoomIn}\r\n\t\t\t\tonZoomOut={zoomOut} onZoomFit={loadOpenFile} newTable={newTable} onSave={saveSerial} \r\n\t\t\t\tonLoad={loadOpenFile} />\r\n\t\t\t<ExportEditor isOpen={isExportOpen}\r\n\t\t\t\tonclose={() => setisExportOpen(false)}\r\n\t\t\t\texportPng={exportPng} exportPdf={exportPdf}></ExportEditor>\r\n\t\t\t<input type=\"file\" id=\"fileinput\" style={{ display: \"none\" }} onChange={onLoadFile}></input>\r\n\t\t\t<FileMenu isOpen={true}></FileMenu>\r\n\t\t\t<TableEditor isOpen={isEdit} diagramctr={diagram} onclose={ToggleEditor}\r\n\t\t\t\tforceUpdate={update}></TableEditor>\r\n\r\n\t\t\t<MenuProvider id=\"diagram\" storeRef={false} >\r\n\t\t\t\t<DemoCanvasWidget background=\"#E9E9E9\" color=\"#808080\" >\r\n\t\t\t\t\t<CanvasWidget engine={diagram.engine} className=\"canvas\" />\r\n\t\t\t\t</DemoCanvasWidget>\r\n\t\t\t</MenuProvider>\r\n\r\n\t\t\t<SimpleContext  />\r\n\r\n\t\t\t<ContextMenus copyFunc={diagram.copySelected} pasteFunc={diagram.pasteSelected} deleteFunc={diagram.deleteSelected}\r\n\t\t\t\tduplicateFunc={diagram.duplicateSelected} cutFunc={diagram.cutSelected} \r\n\t\t\t\tzoomIn={zoomIn} zoomOut={zoomOut}></ContextMenus>\r\n\r\n\t\t</React.Fragment>\r\n\r\n\t);\r\n\r\n}\r\n\r\n\r\n\r\n","F:\\Dev\\MyWebApp\\toper\\src\\libs\\engine.ts",["289","290","291","292","293"],"import createEngine, { DefaultLinkModel, DefaultNodeModel , DiagramEngine,  DiagramModel , PathFindingLinkFactory } from \"@projectstorm/react-diagrams\";\r\n\r\n\r\nimport {SchemaNodeModel} from '../schemanode/node/SchemaNodeModel'\r\nimport {SchemaNodeFactory} from '../schemanode/node/SchemaNodeFactory'\r\n\r\n\r\nfunction GetEngine() : DiagramEngine  {\r\n \r\n    let rs = createEngine({registerDefaultDeleteItemsAction: false,\r\n})\r\n\r\n    rs.getNodeFactories().registerFactory(new SchemaNodeFactory());\r\n\r\n\r\n    const model = new DiagramModel();\r\n\r\n\r\n    let snode =  new SchemaNodeModel({\r\n\t\tname: 'Product',\r\n\t\tcolor: 'rgb(0,192,255)'\r\n\t});\r\n\r\n    let productIdPort = snode.addField({fieldName : \"Id\" , fieldType : \"int\"})\r\n    snode.addField({fieldName : \"ProductName\" , fieldType : \"varchar\"})\r\n    let pnameport = snode.addField({fieldName : \"ProductPrice\" , fieldType : \"int\"})\r\n    snode.addField({fieldName : \"ProductCategory\" , fieldType : \"int\"})\r\n\r\n    snode.setPosition(100, 100);\r\n\r\n\r\n\r\n\r\n    const models = model.addAll(snode);\r\n\r\n    //snode2.addLinkForeignKey(link1.getID())\r\n    \r\n    models.forEach(m => {\r\n        m.registerListener({\r\n            \r\n\t\t\tselectionChanged: () => onclick(m.getID()),\r\n            onDoubleClick : () => ondbclick(m.getID())\r\n\t\t});\r\n\r\n    });\r\n\r\n    \r\n\r\n\t\r\n\r\n    /*\r\n    var node1 = new DefaultNodeModel({\r\n\t\tname: 'Node 1',\r\n\t\tcolor: 'rgb(0,192,255)'\r\n\t});\r\n\tnode1.setPosition(100, 100);\r\n\tlet port1 = node1.addOutPort('id');\r\n    node1.addInPort('int');\r\n\r\n\t//3-B) create another default node\r\n\tvar node2 = new DefaultNodeModel('Node 2', 'rgb(192,255,0)');\r\n\tlet port2 = node2.addInPort('product_id');\r\n    node2.addOutPort('int');\r\n\tnode2.setPosition(400, 100);\r\n\r\n\t// link the ports\r\n\tlet link1 = port1.link<DefaultLinkModel>(port2);\r\n\tlink1.getOptions().testName = 'Test';\r\n\tlink1.addLabel('Hello World!');\r\n    */\r\n    \r\n\r\n    rs.setModel(model);\r\n\r\n   \r\n    return rs\r\n}\r\n\r\nfunction ondbclick(id : string){\r\n    alert('double')\r\n}\r\n\r\nfunction onclick(id : String){\r\n    //alert(id)\r\n    //const dispatch = useDispatch()\r\n    //dispatch(ToggleEditor())\r\n    //store.dispatch(ToggleEditor())\r\n    console.log(id)\r\n   \r\n}\r\n\r\nconst engine = GetEngine()\r\nexport {engine , GetEngine}","F:\\Dev\\MyWebApp\\toper\\src\\custom-node-ts\\TSCustomNodeModel.ts",[],["294","295"],"F:\\Dev\\MyWebApp\\toper\\src\\components\\Appbar.tsx",["296"],"import React , {FunctionComponent, useState} from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 0,\r\n    },\r\n    inputEdit : {\r\n      backgroundColor : \"#3F51B5\",\r\n      padding : 8,\r\n      color : \"white\",\r\n      border: \"none\",\r\n      borderRadius: 4,\r\n      fontSize : 20\r\n\r\n \r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n  }),\r\n);\r\n\r\ninterface AppbarProp {\r\n  title : string,\r\n  onDelete : () => void,\r\n  onEndEdit : (e : string) => void\r\n}\r\n\r\nexport const  Appbar : FunctionComponent<AppbarProp> = ({ onDelete , title , onEndEdit }) => {\r\n  const classes = useStyles();\r\n\r\n  const [isEdit, setisEdit] = useState(false)\r\n\r\n  const [textInput, settextInput] = useState(\"\")\r\n\r\n  function handleChange(e : any){\r\n    settextInput(e.target.value)\r\n  }\r\n\r\n  function handleBlur(){\r\n    setisEdit(!isEdit)\r\n    \r\n    onEndEdit(textInput)\r\n  }\r\n\r\n\r\n\r\n  function handleOpenEdit(){\r\n    setisEdit(true)\r\n    settextInput(title)\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" elevation={0}>\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          {(isEdit) ? \r\n           <input value={textInput} onChange={handleChange} onBlur={ handleBlur} className={classes.inputEdit} />\r\n         \r\n          :\r\n          <Typography  variant=\"h6\" className={classes.title} onClick={handleOpenEdit}>\r\n            {title}\r\n          </Typography>\r\n          }\r\n          <IconButton color=\"inherit\" onClick={onDelete}><DeleteOutlineIcon/></IconButton>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}","F:\\Dev\\MyWebApp\\toper\\src\\components\\TabMat.tsx",["297"],"F:\\Dev\\MyWebApp\\toper\\src\\components\\TabMenu.tsx",["298"],"F:\\Dev\\MyWebApp\\toper\\src\\components\\Toolbar.tsx",["299","300","301","302","303","304"],"import React , {FunctionComponent} from 'react';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport Redo from '@material-ui/icons/Redo';\r\nimport Undo from '@material-ui/icons/Undo';\r\nimport FileCopy from '@material-ui/icons/FileCopy';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormatBoldIcon from '@material-ui/icons/FormatBold';\r\nimport FormatItalicIcon from '@material-ui/icons/FormatItalic';\r\nimport FormatUnderlinedIcon from '@material-ui/icons/FormatUnderlined';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport LaunchIcon from '@material-ui/icons/Launch';\r\nimport PrintIcon from '@material-ui/icons/Print';\r\nimport ZoomInIcon from '@material-ui/icons/ZoomIn';\r\nimport ZoomOutIcon from '@material-ui/icons/ZoomOut';\r\nimport BookmarksIcon from '@material-ui/icons/Bookmarks';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport TableChartIcon from '@material-ui/icons/TableChart';\r\nimport Select from '@material-ui/core/Select';\r\nimport SelectInput from '@material-ui/core/Select/SelectInput';\r\n\r\n\r\nimport { useDispatch , useSelector } from \"react-redux\"\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n\r\n      border: `1px solid ${theme.palette.divider}`,\r\n      borderRadius: theme.shape.borderRadius,\r\n      backgroundColor: '#F1F1F1',\r\n      color: theme.palette.text.secondary,\r\n      '& svg': {\r\n        margin: theme.spacing(1.0),\r\n      },\r\n      '& hr': {\r\n        margin: theme.spacing(0, 0.5),\r\n      },\r\n    },\r\n  }),\r\n);\r\n\r\ninterface ToolbarFunction{\r\n  onZoomIn : () => void,\r\n  onZoomOut : () => void,\r\n  onZoomFit : () => void,\r\n  onSave : () => void,\r\n  onLoad : () => void,\r\n  newTable: () => void\r\n}\r\n\r\nexport const Toolbar: FunctionComponent<ToolbarFunction> = ({onSave , onLoad , onZoomIn , onZoomOut , onZoomFit , newTable }) => {\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      <Grid container alignItems=\"center\" className={classes.root}>\r\n          <TableChartIcon onClick={newTable}></TableChartIcon>\r\n          <LaunchIcon></LaunchIcon>\r\n          <FileCopy></FileCopy>\r\n          <PrintIcon></PrintIcon>\r\n          <Divider orientation=\"vertical\" flexItem />\r\n        <Redo />\r\n        <Undo />\r\n        <Divider orientation=\"vertical\" flexItem />\r\n        <Select>\r\n        <MenuItem value={\"50%\"}>50%</MenuItem>\r\n          <MenuItem value={\"75%\"}>75%</MenuItem>\r\n          <MenuItem value={\"100%\"}>100%</MenuItem>\r\n        </Select>\r\n        <ZoomInIcon onClick={onZoomIn} />\r\n        <ZoomOutIcon  onClick={onZoomOut}/>\r\n        <ZoomOutIcon  onClick={onZoomFit}/>\r\n        <Divider orientation=\"vertical\" flexItem />\r\n        <BookmarksIcon onClick={onSave}></BookmarksIcon>\r\n        <DeleteIcon onClick={onLoad}></DeleteIcon>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}","F:\\Dev\\MyWebApp\\toper\\src\\schemanode\\node\\SchemaNodeModel.ts",["305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333"],"import * as _ from 'lodash';\r\nimport { NodeModel, NodeModelGenerics, PortModel, PortModelAlignment } from '@projectstorm/react-diagrams-core';\r\nimport { SchemaPortModel } from '../port/SchemaPortModel';\r\nimport { BasePositionModelOptions, DeserializeEvent } from '@projectstorm/react-canvas-core';\r\nimport { DefaultLinkModel, DefaultPortModel, DiagramEngine, LinkModel } from '@projectstorm/react-diagrams';\r\nimport { TableData  } from '../../components/TableEditor';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nexport interface DefaultNodeModelOptions extends BasePositionModelOptions {\r\n\tname?: string;\r\n\tcolor?: string;\r\n}\r\n\r\nexport interface Field{\r\n\tinId ?: string,\r\n\toutId ?: string,\r\n\tfieldName : string,\r\n\tfieldType : string,\r\n\tfieldOption ?: FieldOption\r\n}\r\n\r\nexport interface FieldOption {\r\n\tportId : string,\r\n\tai ?: boolean\r\n\tpk ?: boolean,\r\n\tfk ?: boolean,\r\n\tfkTb ?: string,\r\n\tfkField ?: string\r\n}\r\n\r\nexport interface SchemaNodeModelGenerics extends NodeModelGenerics {\r\n\tOPTIONS: DefaultNodeModelOptions;\r\n}\r\n\r\nexport class SchemaNodeModel extends NodeModel<SchemaNodeModelGenerics> {\r\n\tprotected portsIn: DefaultPortModel[];\r\n\tprotected portsOut: DefaultPortModel[];\r\n\tprotected fieldOptions : FieldOption[]\t\r\n\r\n\tconstructor(name: string, color: string);\r\n\tconstructor(options?: DefaultNodeModelOptions);\r\n\tconstructor(options: any = {}, color?: string) {\r\n\t\tif (typeof options === 'string') {\r\n\t\t\toptions = {\r\n\t\t\t\tname: options,\r\n\t\t\t\tcolor: color\r\n\t\t\t};\r\n\t\t}\r\n\t\tsuper({\r\n\t\t\ttype: 'default',\r\n\t\t\tname: 'Untitled',\r\n\t\t\tcolor: 'rgb(0,192,255)',\r\n\t\t\t...options\r\n\t\t});\r\n\t\tthis.portsOut = [];\r\n\t\tthis.portsIn = [];\r\n\t\tthis.fieldOptions = []\r\n\t}\r\n\r\n\tperformanceTune() : boolean { return false}\r\n\r\n\tdoClone(lookupTable: {}, clone: SchemaNodeModel): void {\r\n\r\n\t\tconsole.log('original id : ' + this.getID())\r\n\t\tclone.portsIn = [];\r\n\t\tclone.portsOut = [];\r\n\t\t\r\n\t\tsuper.doClone(lookupTable, clone);\r\n\t\tlet fields = []\r\n\t\tfor (let i = 0; i < clone.portsIn.length; i++) {\r\n\t\t\tclone.fieldOptions[i].portId = clone.portsIn[i].getID()\r\n\t\t}\r\n\t}\r\n\r\n\tremoveFieldbyId(id : string): void{\r\n\t\t\r\n\t\tlet indexof = this.portsIn.findIndex(p=>p.getID() == id );\r\n\r\n\t\tlet fieldIndex = this.fieldOptions.findIndex(f=>f.portId == id)\r\n\r\n\t\tif(indexof == -1) return\r\n\r\n\t\tif(fieldIndex != -1){\r\n\t\t\tthis.fieldOptions.splice(fieldIndex, 1);\r\n\t\t}\r\n\r\n\t\tthis.removeField(indexof)\r\n\t}\r\n\r\n\tremovePort(port: DefaultPortModel): void {\r\n\t\tsuper.removePort(port);\r\n\t\r\n\t\tif (port.getOptions().in) {\r\n\t\t\tthis.portsIn.splice(this.portsIn.indexOf(port), 1);\r\n\t\t} else {\r\n\t\t\tthis.portsOut.splice(this.portsOut.indexOf(port), 1);\r\n\t\t}\r\n\t}\r\n\r\n\tupdateNode(tb : TableData){\r\n\t\r\n\t\tlet fields_tb = tb.fields\r\n\t\tlet fields = this.getAllField()\r\n\t\tfor (let i = 0; i < fields_tb.length; i++) {\r\n\t\t\tif(fields[i].fieldName != fields_tb[i].fieldName){\r\n\t\t\t\tthis.portsIn[i].getOptions().label = fields_tb[i].fieldName\r\n\t\t\t}\r\n\t\t\tif(fields[i].fieldType != fields_tb[i].fieldType){\r\n\t\t\t\tthis.portsOut[i].getOptions().label = fields_tb[i].fieldType\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\r\n\taddField(field : Field) : DefaultPortModel[] {\r\n\t\t\r\n\t\tlet portin = this.addInPort(field.fieldName)\r\n\t\tlet portout = this.addOutPort(field.fieldType)\r\n\t\t\r\n\t\tlet add : FieldOption = {\r\n\t\t\tportId : portin.getID(),\r\n\t\t\tai : false,\r\n\t\t\tpk : false,\r\n\t\t\tfk : false,\r\n\t\t\tfkTb : \"\",\r\n\t\t\tfkField : \"\"\r\n\t\t}\r\n\r\n\t\tthis.fieldOptions.push(add)\r\n\r\n\t\treturn [portin , portout]\r\n\t}\r\n\r\n\tremoveField(i : number){\r\n\r\n\t\tthis.removePort(this.portsIn[i])\r\n\t\tthis.removePort(this.portsOut[i])\r\n\t}\r\n\r\n\tAddNewField(){\r\n\r\n\t\tlet field : Field = {\r\n\t\t\tfieldName : \"test\",\r\n\t\t\tfieldType : \"int\"\r\n\t\t}\r\n\t\tthis.addField(field)\r\n\r\n\t}\r\n\r\n\taddOrUpdateFieldOption(field : Field)  : void{\r\n\t\tlet fieldIndex = this.fieldOptions.findIndex(f=>f.portId == field.inId)\r\n\t\tif(fieldIndex == -1) return\r\n\t\t\r\n\t\tif(field.fieldOption == undefined) return \r\n\t\tthis.fieldOptions[fieldIndex] = field.fieldOption\r\n\t\tconsole.log(field.fieldOption)\r\n\r\n\t\t//fieldrs.\r\n\t\tlet fieldOption = field.fieldOption\r\n\t\tif(fieldOption == undefined) return\r\n\t\t\r\n\t\tlet targetNodeId = (fieldOption.fkTb == undefined) ? \"\" : fieldOption.fkTb\r\n\t\tlet targetPortId = (fieldOption.fkField == undefined) ? \"\" : fieldOption.fkField\r\n\t\tlet sourceIdPort = (field.inId == undefined) ? \"\" : field.inId\r\n\t\t\r\n\t\t//this.linkForeignKey(targetNodeId , targetPortId ,  sourceIdPort)\r\n\t}\r\n\r\n\tlinkForeignKey(targetNode : SchemaNodeModel ,targetIdPort : string , sourceInIdPort : string): LinkModel | undefined{\r\n\t\talert('do link')\r\n\t\tlet targetPort = targetNode.getPortFromID(targetIdPort) as DefaultPortModel\r\n\t\tlet sourceport = this.getPortFromID(sourceInIdPort)  as DefaultPortModel  // find  sourePort\r\n\t\tif(sourceport == null) return undefined\r\n\t\tif(targetPort == null) return undefined\r\n\t\talert('complete link')\r\n\t\tconsole.log(\"main field \" + sourceport.getOptions().label + \" link with : \" + targetPort.getOptions().label)\r\n\t\tconsole.log(sourceport.getOptions().in)\r\n\t\tconsole.log(targetPort.getOptions().in)\r\n\t\tlet link =  targetPort.link(sourceport)\r\n\r\n\t\ttargetPort.reportPosition()\r\n\t\tsourceport.reportPosition()\r\n\t\treturn link\r\n\t}\r\n\r\n\tgetAllField() : Field[]{\r\n\t\tlet portins = this.portsIn\r\n\t\tlet portouts = this.portsOut\r\n\t\tlet rs : Field[] = []\r\n\t\tconsole.log(\"get field lenght : \"+ portins.length)\r\n\r\n\t\tconsole.log(this.fieldOptions)\r\n\r\n\t\tfor (let i = 0; i < portins.length; i++) {\r\n\t\t\tconsole.log(\"check field \" + i )\r\n\t\t\t\r\n\t\t\tlet f = this.getField(i)\r\n\t\t\tconsole.log(f)\r\n\t\t\trs.push(f)\r\n\t\t}\r\n\t\treturn rs\r\n\t}\r\n\r\n\tgetField(index : number) : Field{\r\n\r\n\t\tlet field = this.portsIn[index].getOptions().label\r\n\t\tlet type = this.portsOut[index].getOptions().label\r\n\t\tlet id = this.portsIn[index].getID()\r\n\t\tconsole.log(\"check id : \" + id)\r\n\t\t\r\n\t\tlet fieldOptionIndex = this.fieldOptions.findIndex(f=>f.portId == id)\r\n\r\n\t\tconsole.log(\"fieldopt index : \" + fieldOptionIndex)\r\n\r\n\t\tif(fieldOptionIndex == -1){\r\n\t\t\tlet r : Field = {\r\n\t\t\t\tinId : '',\r\n\t\t\toutId : '',\r\n\t\t\tfieldName : '',\r\n\t\t\tfieldType : '',\r\n\t\r\n\t\t\t}\r\n\t\t\treturn r\r\n\t\t}\r\n\r\n\t\tlet fieldOption = this.fieldOptions[fieldOptionIndex]\r\n\t\tconsole.log(\"field name : \" + field + \" pk : \" + fieldOption.pk + \" fk : \" + fieldOption.fk)\r\n\r\n\t\tif(field == undefined) field = \"\"\r\n\t\tif(type == undefined) type = \"\"\r\n\r\n\t\t\r\n\t\tlet rs : Field = {\r\n\t\t\tinId : this.portsIn[index].getID(),\r\n\t\t\toutId : this.portsOut[index].getID(),\r\n\t\t\tfieldName : field,\r\n\t\t\tfieldType : type,\r\n\t\t\tfieldOption : fieldOption\r\n\t\t}\r\n\r\n\t\treturn rs\r\n\t}\r\n\r\n\tupdatePort(port: SchemaPortModel , index : number){\r\n\t\t\r\n\t}\r\n\r\n\taddPort<T extends DefaultPortModel>(port: T): T {\r\n\r\n\r\n\t\tsuper.addPort(port);\r\n\t\t\r\n\t\tif (port.getOptions().in) {\r\n\t\t\tif (this.portsIn.indexOf(port) === -1) {\r\n\t\t\t\tthis.portsIn.push(port);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (this.portsOut.indexOf(port) === -1) {\r\n\t\t\t\tthis.portsOut.push(port);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn port;\r\n\t}\r\n\r\n\taddInPort(label: string, after = true): DefaultPortModel {\r\n\t\tlet uid = uuidv4()\r\n\t\tconst p = new DefaultPortModel({\r\n\t\t\tin: true,\r\n\t\t\tname: uid,\r\n\t\t\tlabel: label,\r\n\t\t\talignment: PortModelAlignment.LEFT\r\n\t\t});\r\n\t\tif (!after) {\r\n\t\t\tthis.portsIn.splice(0, 0, p);\r\n\t\t}\r\n\t\treturn this.addPort(p);\r\n\t}\r\n\r\n\taddOutPort(label: string, after = true): DefaultPortModel {\r\n\t\tlet uid = uuidv4()\r\n\t\tconst p = new DefaultPortModel({\r\n\t\t\tin: false,\r\n\t\t\tname: uid,\r\n\t\t\tlabel: label,\r\n\t\t\talignment: PortModelAlignment.RIGHT\r\n\t\t});\r\n\t\tif (!after) {\r\n\t\t\tthis.portsOut.splice(0, 0, p);\r\n\t\t}\r\n\t\treturn this.addPort(p);\r\n\t}\r\n\r\n\t//when convert back to model it is no function to add field and add fieldoption : \r\n\t//fix you need \r\n\r\n\tdeserialize(event: DeserializeEvent<this>) {\r\n\t\tsuper.deserialize(event);\r\n\r\n\t\tthis.options.name = event.data.name;\r\n\t\tthis.options.color = event.data.color;\r\n\t\tthis.fieldOptions = event.data.fields\r\n\t\tconsole.log(this.fieldOptions)\r\n\t\tthis.portsIn = _.map(event.data.portsInOrder, (id : any) => {\r\n\t\t\treturn this.getPortFromID(id);\r\n\t\t}) as DefaultPortModel[];\r\n\t\tthis.portsOut = _.map(event.data.portsOutOrder, (id : any) => {\r\n\t\t\treturn this.getPortFromID(id);\r\n\t\t}) as DefaultPortModel[];\r\n\t\tconsole.log(\"deserial call on shemaModel\")\r\n\r\n\t\tconsole.log(\"after deserial\")\r\n\r\n\t}\r\n\r\n\tdeserializeFieldOption(){\r\n\r\n\t}\r\n\r\n\tserializeClone(c : any){\r\n\t\tconsole.log('serial clone')\r\n\t\tconsole.log(c)\r\n\t}\r\n\r\n\tserialize(): any {\r\n\r\n\t\tconsole.log(\"call serialize on model\")\r\n\r\n\t\tlet fields = []\r\n\r\n\t\tconsole.log(this.fieldOptions)\r\n\r\n\t\tfor (let i = 0; i < this.portsIn.length; i++) {\r\n\t\t\t\r\n\t\t\tlet fieldOptionIndex = this.fieldOptions.findIndex(f=>f.portId == this.portsIn[i].getID())\r\n\t\t\tconsole.log(\"fieldOptIndex : \" + fieldOptionIndex)\r\n\t\t\tif(fieldOptionIndex == -1) continue\r\n\t\t\tfields.push({\r\n\t\t\t\tportId : this.portsIn[i].getID(),\r\n\t\t\t\tfieldName : this.portsIn[i].getOptions().label,\r\n\t\t\t\tfieldType : this.portsOut[i].getOptions().label,\r\n\t\t\t\tai : this.fieldOptions[fieldOptionIndex].ai,\r\n\t\t\t\tpk : this.fieldOptions[fieldOptionIndex].pk\r\n\t\t\t})\r\n\t\t\t\r\n\t\t}\r\n\r\n\t\t\r\n\t\treturn {\r\n\t\t\t...super.serialize(),\r\n\t\t\tname: this.options.name,\r\n\t\t\tcolor: this.options.color,\r\n\t\t\tfields : fields,\r\n\t\t\tportsInOrder: _.map(this.portsIn, (port) => {\r\n\t\t\t\treturn port.getID();\r\n\t\t\t}),\r\n\t\t\tportsOutOrder: _.map(this.portsOut, (port) => {\r\n\t\t\t\treturn port.getID();\r\n\t\t\t})\r\n\t\t};\r\n\t}\r\n\r\n\ttoJson() : any{\r\n\t\t\r\n\t\tlet fields = []\r\n\t\tfor (let i = 0; i < this.portsIn.length; i++) {\r\n\t\t\tlet fieldOptionIndex = this.fieldOptions.findIndex(f=>f.portId == this.portsIn[i].getID())\r\n\t\t\tif(fieldOptionIndex == -1) continue\r\n\t\t\tlet field = {\r\n\t\t\t\tfieldName : this.portsIn[i].getOptions().label,\r\n\t\t\t\tfieldType : this.portsOut[i].getOptions().label,\r\n\t\t\t\tfieldOption : this.fieldOptions[fieldOptionIndex]\r\n\t\t\t}\r\n\t\t\tfields.push(field)\r\n\t\t}\r\n\t\tlet rs = {\r\n\t\t\tname : this.options.name,\r\n\t\t\tcolor : this.options.color,\r\n\t\t\tfields : fields\r\n\t\t}\r\n\t\treturn rs\r\n\t}\r\n\r\n\tgetInPorts(): DefaultPortModel[] {\r\n\t\treturn this.portsIn;\r\n\t}\r\n\r\n\tgetOutPorts(): DefaultPortModel[] {\r\n\t\treturn this.portsOut;\r\n\t}\r\n\r\n\t\r\n}","F:\\Dev\\MyWebApp\\toper\\src\\schemanode\\port\\SchemaPortModel.ts",["334","335","336","337","338"],"F:\\Dev\\MyWebApp\\toper\\src\\schemanode\\node\\SchemaNodeFactory.tsx",["339"],"import * as React from 'react';\r\nimport { SchemaNodeModel } from './SchemaNodeModel';\r\nimport { SchemaNodeWidget } from './SchemaNodeWidget';\r\nimport { AbstractReactFactory , GenerateWidgetEvent } from '@projectstorm/react-canvas-core';\r\nimport { DiagramEngine } from '@projectstorm/react-diagrams-core';\r\nimport { MenuProvider  } from 'react-contexify';\r\n\r\nexport class SchemaNodeFactory extends AbstractReactFactory<SchemaNodeModel, DiagramEngine> {\r\n\r\n\tconstructor() {\r\n\t\tsuper('default');\r\n\t}\r\n\t\r\n\r\n\tgenerateReactWidget(event : any): JSX.Element {\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<MenuProvider id=\"component\" storeRef={false} data={event.model}>\r\n\t\t\t\t<SchemaNodeWidget engine={this.engine} node={event.model}  />\r\n\t\t\t</MenuProvider>\r\n\t\t\t)\r\n\t}\r\n\r\n\tgenerateModel(initialConfig : any) {\r\n\t\treturn new SchemaNodeModel('Node 2', 'rgb(192,255,0)');\r\n\t}\r\n}","F:\\Dev\\MyWebApp\\toper\\src\\schemanode\\node\\SchemaNodeWidget.tsx",["340","341","342"],"import * as React from 'react';\r\nimport * as _ from 'lodash';\r\nimport { DiagramEngine } from '@projectstorm/react-diagrams-core';\r\nimport { SchemaNodeModel } from './SchemaNodeModel';\r\nimport { SchemaPortLabel } from '../port/SchemaPortLabelWidget';\r\nimport styled from '@emotion/styled';\r\nimport { css } from '@emotion/core';\r\nimport { SchemaPortModel } from '../port/SchemaPortModel';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\n\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\n\r\n\texport const Node = styled.div<{ background ?: string; selected: boolean }>`\r\n\t\r\n\t\r\n\r\n\t\tborder-style: solid;\r\n\r\n\t\tborder-color : grey;\r\n\r\n\t\tborder-width: thin;\r\n\r\n\t\tcolor: white;\r\n\t\t\r\n\t\toverflow: visible;\r\n\t\tfont-size: 13px;\r\n\t\t\r\n\t`;\r\n\r\n\texport const Title = styled.div`\r\n\t\tbackground-color: #005AA0;\r\n\t\tdisplay: flex;\r\n\t\tfont-weight: 600;\r\n\t\twhite-space: nowrap;\r\n\t\tjustify-items: center;\r\n\t`;\r\n\r\n\texport const TitleName = styled.div`\r\n\t\tmargin-left : 10px;\r\n\t\tflex-grow: 1;\r\n\t\tpadding: 10px 5px;\r\n\t`;\r\n\r\n\texport const Ports = styled.div`\r\n\t\tdisplay: flex;\r\n\t\tcolor : #5E666E;\r\n\t\tfont-weight: 600;\r\n\t\tbackground-color: white;\r\n\t`;\r\n\r\n\texport const PortsContainer = styled.div`\r\n\t\tflex-grow: 1;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\t&:first-of-type {\r\n\t\t\tmargin-right: 10px;\r\n\t\t}\r\n\t\t&:only-child {\r\n\t\t\tmargin-right: 0px;\r\n\t\t}\r\n\t`;\r\n\r\n\r\nexport interface DefaultNodeProps {\r\n\tnode: SchemaNodeModel;\r\n\tengine: DiagramEngine;\r\n}\r\n\r\n/**\r\n * Default node that models the DefaultNodeModel. It creates two columns\r\n * for both all the input ports on the left, and the output ports on the right.\r\n */\r\n\r\n\r\nexport class SchemaNodeWidget extends React.Component<DefaultNodeProps> {\r\n\r\n\r\n\tcomponentDidUpdate(prevProps : DefaultNodeProps) {\r\n\t\t// Typical usage (don't forget to compare props):\r\n\t\t\r\n\t\t//alert('com update')\r\n\r\n\t\tif(prevProps == this.props){\r\n\t\t\t//alert('some')\r\n\t\t}else{\r\n\t\t\t//alert('new')\r\n\t\t\t\r\n\t\t}\r\n\r\n\t  }\r\n\r\n\t  fireAction (event : any) {\r\n\t\tthis.props.engine.getActionEventBus().fireAction({\r\n\t\t  event: {\r\n\t\t\t...event,\r\n\t\t\tkey: '',\r\n\t\t\tpreventDefault: () => {},\r\n          stopPropagation: () => {},\r\n\t\t  },\r\n\t\t});\r\n\t  }\r\n\r\n\t  fireDeleteEvent(engine : DiagramEngine){\r\n\t\tlet e = { type: 'keydown', ctrlKey: true, code: 'Delete' }\r\n\t\tthis.fireAction(e);\r\n\t  }\r\n\r\n\tfireDoubleClick(engine : DiagramEngine){\r\n\t\tconsole.log(\"double click\")\r\n\t\tif(engine != undefined){\r\n\t\r\n\t\t\tengine.fireEvent({ }, 'onDoubleClick');\r\n\t\t}else{\r\n\t\t\tconsole.log(\"unid\")\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\r\n\tgeneratePort = (port : SchemaPortModel) => {\r\n\t\r\n\t\treturn <SchemaPortLabel engine={this.props.engine} port={port} key={port.getID()}  />;\r\n\t};\r\n\r\n\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Node\r\n\t\t\t\tdata-default-node-name={this.props.node.getOptions().name}\r\n\t\t\t\tselected={this.props.node.isSelected()}\r\n\t\t\t\tbackground={this.props.node.getOptions().color} onDoubleClick={() => this.fireDoubleClick(this.props.engine)}>\r\n\t\t\t\t<Title>\r\n\t\t\t\t\t<TitleName>{this.props.node.getOptions().name}</TitleName>\r\n\t\t\t\t\t<IconButton  onClick={()=> this.fireDeleteEvent(this.props.engine)} color=\"inherit\" size=\"small\">\r\n          \t\t\t\t<DeleteOutlineIcon/>\r\n        \t\t\t</IconButton>\r\n\r\n\t\t\t\t</Title>\r\n\t\t\t\t<Ports>\r\n\t\t\t\t\t<PortsContainer>{_.map(this.props.node.getInPorts(), this.generatePort)}</PortsContainer>\r\n\t\t\t\t\t<PortsContainer>{_.map(this.props.node.getOutPorts(), this.generatePort)}</PortsContainer>\r\n\t\t\t\t</Ports>\r\n\t\t\t</Node>\r\n\t\t);\r\n\t}\r\n}","F:\\Dev\\MyWebApp\\toper\\src\\schemanode\\port\\SchemaPortLabelWidget.tsx",[],["343","344"],"F:\\Dev\\MyWebApp\\toper\\src\\components\\AppToolbar.tsx",["345","346","347","348","349"],"\r\nimport React , {FunctionComponent} from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Button  from '@material-ui/core/Button';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n\r\n    },\r\n    menu : {\r\n        marginRight : 10\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n  }),\r\n);\r\n\r\ninterface ToolbarFunction {\r\n  onExport : () => void,\r\n\r\n}\r\n\r\nexport const AppToolbar: FunctionComponent<ToolbarFunction> = ({onExport }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{height : 30,marginLeft : 20 }}>\r\n \r\n          <Typography variant=\"h6\" color=\"inherit\" >\r\n            Visual Draw\r\n            \r\n          </Typography>\r\n          \r\n      </div>\r\n      <div style={{height : 40}}>\r\n \r\n          \r\n      <Button>File</Button>\r\n          <Button onClick={onExport}>Export</Button>\r\n          <Button> Print</Button>\r\n          <Button>Help</Button>\r\n          <Typography className={classes.title}></Typography>\r\n\r\n          \r\n   \r\n      </div>\r\n  \r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n","F:\\Dev\\MyWebApp\\toper\\src\\components\\TableEditor.tsx",["350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383","384","385","386","387","388"],"import React , {FunctionComponent, useEffect, useMemo, useState} from 'react'\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport {Appbar} from './Appbar'\r\nimport TableMat from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport {BaseModel} from '@projectstorm/react-canvas-core'\r\n\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport { DiagramEngine, NodeModel } from '@projectstorm/react-diagrams';\r\nimport { SchemaNodeModel , Field } from '../schemanode/node/SchemaNodeModel';\r\nimport { DiagramController } from '../DiagramController/DiagramCtr';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\n\r\nexport interface TableProps  {\r\n    isOpen : boolean,\r\n    diagramctr : DiagramController,\r\n    forceUpdate : boolean,\r\n    onclose : () => void\r\n}\r\n\r\nexport interface TableData {\r\n  id ?: string,\r\n  tablename : string,\r\n  fields : Field[]\r\n}\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    styledTable : {\"borderCollapse\":\"collapse\",\r\n    \"margin\":\"25px 0\",\"fontSize\":\"0.9em\",\"fontFamily\":\"sans-serif\",\r\n    \"minWidth\":\"400px\",\"boxShadow\":\"0 0 20px rgba(0, 0, 0, 0.15)\"\r\n  },\r\n  cell : {\r\n    padding : 10\r\n  }\r\n  \r\n  }),\r\n);\r\n\r\n\r\nexport const TableEditor : FunctionComponent<TableProps> = ({isOpen , diagramctr , onclose , forceUpdate}) => {\r\n\r\n\r\n    const classes = useStyles();\r\n\r\n    const [currentTable, setTable] = useState(getNodeData(diagramctr))\r\n    \r\n    const [otherTable, setotherTable] = useState(getOtherTable())\r\n\r\n    const [textInput, settextInput] = useState(\"\")\r\n\r\n\r\n\r\n    const [isEdit, setisEdit] = useState(false)\r\n\r\n    const [currentSelectTableId, setcurrentSelectTableId] = useState(\"\")\r\n\r\n    const [currentFieldId, setcurrentFieldId] = useState(\"\")\r\n\r\n    const currentField = useMemo(() => loadTableFieldSelect(), [currentSelectTableId]);\r\n\r\n    const [toggleUpdate, settoggleUpdate] = useState(false)\r\n\r\n    const [currentEdit, setcurrentEdit] = useState(\"\")\r\n\r\n    const [typeSelect, settypeSelect] = useState(\"\")\r\n    \r\n    useEffect(() => {\r\n      setTable(getNodeData(diagramctr))\r\n      console.log('update tb')\r\n    }, [isOpen , toggleUpdate , forceUpdate])\r\n\r\n    function getOtherTable() : TableData[]{\r\n\r\n      console.log(\"Start getOtherTable function\")\r\n      let rs : TableData[] = []\r\n      let alltb = diagramctr.getEngine().getModel().getNodes() as SchemaNodeModel[]\r\n      alltb.forEach(tb => {\r\n        let name =tb.getOptions().name\r\n        if(name == undefined) name = \"\"\r\n        let add : TableData = {\r\n          id : tb.getID(),\r\n          tablename : name,\r\n          fields : tb.getAllField()\r\n        }\r\n        rs.push(add)\r\n      });\r\n      return rs\r\n    }\r\n\r\n \r\n    function getNodeData(diagramctr : DiagramController) : TableData{\r\n      let rs : TableData = {\r\n        id : \"\",\r\n        tablename : '',\r\n        fields : []\r\n      }\r\n      let node = diagramctr.currentNode()\r\n\r\n      if(node == undefined) return rs\r\n\r\n      if(node instanceof SchemaNodeModel){\r\n        console.log(\"Start getNodeData function\")\r\n        let nodedata = node as SchemaNodeModel\r\n        let tbname = nodedata.getOptions().name\r\n        if(tbname === undefined) tbname = \"\"\r\n        rs.tablename = tbname\r\n        rs.id = nodedata.getID()\r\n        rs.fields = getFieldsData(nodedata)\r\n      }\r\n\r\n      return rs\r\n    }\r\n\r\n    function getFieldsData(node : SchemaNodeModel) : Field[]{\r\n      let fieldlist = node.getAllField()\r\n      console.log(\"get all fields\")\r\n      console.log(fieldlist)\r\n      return fieldlist\r\n    }\r\n\r\n    function setEditField(id : string , fieldName : string){\r\n      setisEdit(true)\r\n      settextInput(fieldName)\r\n      setcurrentEdit(id)\r\n    }\r\n\r\n    function closeEdit() {\r\n      setisEdit(true)\r\n      updateNode()\r\n      setcurrentEdit(\"\")\r\n    }\r\n\r\n    function updateNode(){\r\n      let newtb = currentTable\r\n      \r\n      let indexof = newtb.fields.findIndex(f=>f.fieldName == currentEdit)\r\n\r\n      if(indexof == -1) return\r\n\r\n      newtb.fields[indexof].fieldName = textInput\r\n\r\n      if(typeSelect != \"\") newtb.fields[indexof].fieldType = typeSelect\r\n      setTable(newtb)\r\n\r\n      diagramctr.updateNode(newtb)\r\n    }\r\n\r\n    function handleChange(e : any)  {\r\n      settextInput(e.target.value)\r\n    }\r\n\r\n    function handleEnter(){\r\n\r\n    }\r\n\r\n    function handleTypeChange(e : any){\r\n      settypeSelect(e.target.value)\r\n    }\r\n\r\n\r\n    function onDelete(){\r\n      let node = diagramctr.currentNode()\r\n      if(node == undefined) return\r\n      diagramctr.deleteSelected()\r\n      onclose()\r\n    }\r\n\r\n    function newField(){\r\n      let node = diagramctr.currentNode()\r\n      if(node == undefined) return\r\n      node.AddNewField()\r\n\r\n      let newtb = currentTable\r\n      newtb.fields.push({fieldName : \"test\",\r\n\t\t\tfieldType : \"int\"})\r\n      setTable(newtb)\r\n\r\n      settoggleUpdate(!toggleUpdate)\r\n\r\n      diagramctr.getEngine().repaintCanvas()\r\n    }\r\n\r\n    function removeField(id : string | undefined){\r\n      if(id == undefined) return\r\n      let node = diagramctr.currentNode()\r\n      if(node == undefined) return\r\n      node.removeFieldbyId(id)\r\n      settoggleUpdate(!toggleUpdate)\r\n      diagramctr.getEngine().repaintCanvas()\r\n    }\r\n\r\n    function onSelectTableChange(e : any){\r\n      setcurrentSelectTableId(e.target.value)\r\n    }\r\n\r\n    function loadTableFieldSelect() : Field[]{\r\n      if(currentSelectTableId == \"\") return []\r\n      let tb = otherTable.find(t=>t.id === currentSelectTableId)\r\n      if(tb == undefined) return []\r\n      return tb.fields \r\n    }\r\n\r\n    function onChangeFieldSelect(e : any){\r\n      let targetPortOutId = e.target.value\r\n      let sourceField = currentTable.fields.find(f=>f.fieldName == currentEdit)\r\n\r\n      setcurrentFieldId(targetPortOutId)\r\n\r\n      let currentTableId = (currentTable.id == undefined) ? \"\" : currentTable.id == undefined\r\n      if(currentTableId == currentSelectTableId || sourceField == undefined) return // if link self table and selt field\r\n      alert('on link')\r\n     \r\n      let sourceFieldId = (sourceField.inId == undefined) ? \"\" : sourceField.inId \r\n      diagramctr.linkModel(currentSelectTableId , targetPortOutId  ,  sourceFieldId )\r\n      \r\n    }\r\n\r\n    function onSelectForeignKey(){\r\n      let node = diagramctr.currentNode() as SchemaNodeModel\r\n      if(node == undefined) return\r\n      let field = currentTable.fields.find(f=>f.fieldName == currentEdit)\r\n\r\n      if(field == undefined) return\r\n\r\n      let portid = field.inId\r\n      if(portid == undefined) portid = \"\"\r\n\r\n      let option = {\r\n        portId : portid,\r\n        fkTb : currentSelectTableId,\r\n        fkField : currentFieldId\r\n      }\r\n      //node.addOrUpdateFieldOption(option)\r\n      diagramctr.getEngine().repaintCanvas()\r\n    }\r\n\r\n    function onNameChange(e : string){\r\n      let newtb = currentTable\r\n      newtb.tablename = e\r\n      setTable(newtb)\r\n\r\n      diagramctr.updateNodeName(e)\r\n\r\n      settoggleUpdate(!toggleUpdate)\r\n\r\n\r\n    }\r\n\r\n    function getFieldOption(f : Field , optionName : string) : any{\r\n      let fieldOption = f.fieldOption\r\n      if(fieldOption == undefined) {\r\n        console.log('field option undifine')\r\n        return false}\r\n      if(optionName == \"pk\") return fieldOption.pk\r\n      if(optionName == \"fk\") return fieldOption.fk\r\n      \r\n    }\r\n\r\n    function setFieldOption(e:any ,idField : string | undefined , optionName : string){\r\n\r\n      if(idField == undefined) return \r\n\r\n      console.log(optionName)\r\n\r\n      let fieldIndexof = currentTable.fields.findIndex(f=>f.inId == idField)\r\n      let tb = currentTable\r\n      let newfieldOption = tb.fields[fieldIndexof].fieldOption\r\n      if(newfieldOption == undefined) return\r\n \r\n      if(optionName == \"pk\") {\r\n        newfieldOption.pk = !newfieldOption.pk\r\n      } \r\n      if(optionName == \"fk\") {\r\n        newfieldOption.fk = !newfieldOption.fk\r\n      }\r\n\r\n      tb.fields[fieldIndexof].fieldOption = newfieldOption\r\n      setTable(tb)\r\n      \r\n      console.log(newfieldOption)\r\n      diagramctr.updateFieldOption(tb.fields[fieldIndexof])\r\n      settoggleUpdate(!toggleUpdate)\r\n    }\r\n\r\n    return <Drawer anchor={\"right\"} open={isOpen} style={{width : 600}} onClose={onclose}>\r\n                <div>          \r\n      <Appbar onDelete={onDelete} title={currentTable.tablename} onEndEdit={onNameChange}></Appbar>\r\n       <TableContainer>\r\n      <TableMat aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell className={classes.cell}>Field Name</TableCell>\r\n            <TableCell className={classes.cell}>Type Name</TableCell>\r\n            <TableCell className={classes.cell}>PK</TableCell>\r\n            <TableCell className={classes.cell}>FK</TableCell>\r\n            <TableCell className={classes.cell}>Action</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n        {currentTable.fields.map((row : Field , index : number) => (\r\n            <TableRow key={row.fieldName} className={classes.cell}>\r\n              {(isEdit && currentEdit == row.fieldName) ? \r\n              <>\r\n              <TableCell component=\"th\" scope=\"row\" className={classes.cell}>\r\n                 <input  onFocus={() => handleEnter} onBlur={() => closeEdit()} \r\n                 onChange ={handleChange} value={textInput} />\r\n               </TableCell>\r\n                <TableCell component=\"th\" scope=\"row\" className={classes.cell}>\r\n                <select onChange={handleTypeChange} value={typeSelect} >\r\n                  <option value=\"int\">Interger</option>\r\n                  <option value=\"varchar\">Varchar</option>\r\n                  <option value=\"float\">Float</option>\r\n                  <option value=\"bool\">Boolean</option>\r\n                </select> \r\n              </TableCell>\r\n              <TableCell component=\"th\" scope=\"row\" className={classes.cell}>\r\n             \r\n                <select placeholder=\"Select Table\" value={currentSelectTableId} onChange={onSelectTableChange}>\r\n                {otherTable.map(o => <option key={o.id} value={o.id}>{o.tablename}</option>)}\r\n                </select> \r\n\r\n                <select placeholder=\"Select Field\" value={currentFieldId} onChange={onChangeFieldSelect}>\r\n                {currentField.map(f => <option key={f.fieldName} value={f.outId}>{f.fieldName}</option>)}\r\n                </select> \r\n              </TableCell>\r\n              </>      \r\n               : \r\n               <>\r\n               <TableCell className={classes.cell} component=\"th\" scope=\"row\"  onClick={() => setEditField(row.fieldName , row.fieldName)}>\r\n                {row.fieldName}\r\n               </TableCell> \r\n\r\n              <TableCell className={classes.cell} component=\"th\" scope=\"row\" onClick={() => setEditField(row.fieldName , row.fieldName)}>\r\n                {row.fieldType}\r\n              </TableCell> \r\n               </>\r\n                }\r\n\r\n              <TableCell className={classes.cell}>\r\n                <input type=\"checkbox\" checked={(getFieldOption(row , \"pk\"))} \r\n                onChange={(e) => setFieldOption(e ,row.inId , \"pk\")} key={`pk${row.inId}`}  />\r\n              </TableCell>\r\n              <TableCell>\r\n                <input type=\"checkbox\" checked={(getFieldOption(row , \"fk\"))} \r\n                onChange={(e) => setFieldOption(e ,row.inId , \"fk\")}  />\r\n              </TableCell>\r\n              <TableCell className={classes.cell} >\r\n                <IconButton onClick={() => removeField(row.inId)} size=\"small\">\r\n                  <DeleteOutlineIcon></DeleteOutlineIcon>\r\n                </IconButton>\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </TableMat>\r\n    </TableContainer>\r\n    <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\" onClick={() => newField()}>\r\n          <AddCircleOutlineIcon />\r\n    </IconButton>\r\n    </div>\r\n            </Drawer>\r\n}","F:\\Dev\\MyWebApp\\toper\\src\\components\\FileMenu.tsx",["389","390","391","392","393","394","395","396","397","398","399"],"import React, { FunctionComponent } from 'react'\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport clsx from 'clsx';\r\nimport TableMat from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport classes from '*.module.css';\r\nimport styled from '@emotion/styled';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nexport interface TableEditorProp{\r\n    isOpen : boolean\r\n}\r\n\r\n\r\n\r\n\r\n  export const LEFT = styled.div<{}>`\r\nwidth : 25%;\r\nheight: 100vh;\r\ncolor : white;\r\nfont-size : 20px;\r\nbackground-color: #005AA0;\r\n`;\r\n\r\nexport const MenuList = styled.div<{}>`\r\n\r\ncolor : white;\r\n\r\npadding : 15px;\r\nmargin-bottom : 10px;\r\n`;\r\n\r\nexport const Menu = styled.div<{}>`\r\n\r\ncolor : white;\r\nfont-size : 20px;\r\nmargin : 8px;\r\n\r\n`;\r\n  \r\n\r\nexport const Right = styled.div<{}>`\r\nwidth : 75%;\r\nbackground-color: \"white\";\r\nmargin : 15px;\r\nfont-size : 20px;\r\n\r\n`;\r\n\r\n\r\n\r\n\r\nexport class FileMenu extends React.Component<TableEditorProp> {\r\n\r\n    \r\n\r\n    render() {\r\n        const r = `Create Table Product (\r\n                id int;\r\n                ProdutName varchar;\r\n                ProductPrice int;\r\n                Category int;\r\n                Primary key id\r\n            )\r\n            \r\n            //////////////////////////\r\n\r\n            Create Table ProductImage (\r\n                id int;\r\n                ProductId int\r\n                ImageUrl varchar\r\n                Primary key id\r\n            )\r\n        `\r\n        return (\r\n            <Drawer anchor={\"right\"} open={false} style={{width : 400}}>\r\n               <div\r\n      style={{width : 500 , display : \"flex\"}}\r\n      role=\"presentation\"\r\n        className=\"\"\r\n    >\r\n   \r\n      <LEFT>\r\n          <IconButton color=\"inherit\" size=\"medium\"><HighlightOffIcon></HighlightOffIcon></IconButton>\r\n        <MenuList>\r\n            <Menu>File</Menu>\r\n            <Menu>Export</Menu>\r\n            <Menu>Setting</Menu>\r\n\r\n            <Divider style={{marginTop:10,color : \"white\"}} light={true}></Divider>\r\n        </MenuList>\r\n      </LEFT>\r\n      <Right>\r\n        <div>Propertie</div>\r\n        <TextField label=\"Title\" variant=\"filled\" multiline style={{marginTop:20,width:\"100%\"}}\r\n         value={\"E-commerce\"}></TextField>\r\n\r\n            <div style={{marginTop:15}}>Status Share</div>\r\n\r\n\r\n          <div style={{marginTop:15}}>\r\n          <Button variant=\"outlined\"  style={{marginRight:10 }}>Public</Button>\r\n          <Button variant=\"outlined\"  style={{marginRight:10 }}>Protected</Button>\r\n          <Button variant=\"outlined\" color=\"primary\" style={{marginRight:10 }}>Private</Button>\r\n          </div>\r\n          \r\n      </Right>\r\n\r\n    </div>\r\n            </Drawer>\r\n        )\r\n    }\r\n}","F:\\Dev\\MyWebApp\\toper\\src\\components\\ContextMenus\\ContextMenuShortcutContainer.jsx",[],["400","401"],"F:\\Dev\\MyWebApp\\toper\\src\\components\\ContextMenus\\ContextMenuIconContainer.jsx",[],"F:\\Dev\\MyWebApp\\toper\\src\\components\\ContextMenus\\KeyMenu.jsx",[],"F:\\Dev\\MyWebApp\\toper\\src\\components\\Icons\\index.js",[],"F:\\Dev\\MyWebApp\\toper\\src\\components\\Icons\\ZoomOut.jsx",[],"F:\\Dev\\MyWebApp\\toper\\src\\components\\Icons\\Undo.jsx",[],"F:\\Dev\\MyWebApp\\toper\\src\\components\\Icons\\ZoomIn.jsx",[],"F:\\Dev\\MyWebApp\\toper\\src\\components\\Icons\\Settings.jsx",[],"F:\\Dev\\MyWebApp\\toper\\src\\components\\Icons\\Stop.jsx",[],"F:\\Dev\\MyWebApp\\toper\\src\\components\\Icons\\Redo.jsx",[],"F:\\Dev\\MyWebApp\\toper\\src\\components\\Icons\\Duplicate.jsx",[],"F:\\Dev\\MyWebApp\\toper\\src\\components\\Icons\\Play.jsx",[],"F:\\Dev\\MyWebApp\\toper\\src\\components\\Icons\\Pause.jsx",[],"F:\\Dev\\MyWebApp\\toper\\src\\components\\Icons\\Paste.jsx",[],"F:\\Dev\\MyWebApp\\toper\\src\\components\\Icons\\Cut.jsx",[],"F:\\Dev\\MyWebApp\\toper\\src\\components\\Icons\\Copy.jsx",[],"F:\\Dev\\MyWebApp\\toper\\src\\components\\Icons\\Close.jsx",[],"F:\\Dev\\MyWebApp\\toper\\src\\components\\Icons\\Edit.jsx",[],"F:\\Dev\\MyWebApp\\toper\\src\\components\\Icons\\Delete.jsx",[],"F:\\Dev\\MyWebApp\\toper\\src\\components\\Icons\\ArrowRight.jsx",[],"F:\\Dev\\MyWebApp\\toper\\src\\components\\Icons\\Chevron.jsx",[],"F:\\Dev\\MyWebApp\\toper\\src\\components\\Icons\\Chevrons.jsx",[],"F:\\Dev\\MyWebApp\\toper\\src\\components\\Icons\\ArrowLeft.jsx",[],"F:\\Dev\\MyWebApp\\toper\\src\\DiagramController\\DiagramCtr.tsx",["402","403","404","405","406","407","408","409","410","411"],"\r\nimport * as _ from 'lodash';\r\n\r\n//import ClipboardAction from './actions/ClipboardAction';\r\nimport DeleteAction from './actions/DeleteAction';\r\nimport NewNodeAction from './actions/NewNodeAction';\r\nimport DuplicateAction from './actions/DuplicateAction';\r\n//import UndoRedoAction from './actions/UndoRedoAction';\r\nimport ZoomAction from './actions/ZoomAction';\r\nimport ClipboardAction from './actions/Clipboard'\r\nimport { Action } from '@projectstorm/react-canvas-core';\r\n\r\nimport { DiagramEngine } from '@projectstorm/react-diagrams';\r\nimport { GetEngine } from '../libs/engine'\r\nimport { SchemaNodeModel } from '../schemanode/node/SchemaNodeModel';\r\nimport { TableData } from '../components/TableEditor';\r\nimport { Field } from '../schemanode/node/SchemaNodeModel'\r\n\r\nexport class DiagramController {\r\n\r\n  isLock: boolean;\r\n  engine: DiagramEngine\r\n\r\n  constructor() {\r\n    this.isLock = false\r\n    this.engine = GetEngine()\r\n\r\n    this.initActions()\r\n\r\n    console.log(this.getEngine().getModel().getZoomLevel())\r\n\r\n    let links = this.getEngine().getModel().getLinks()\r\n\r\n    let models = this.getEngine().getModel().getModels()\r\n\r\n    console.log(links)\r\n\r\n    //let p1= links[0].getTargetPort()\r\n    //let nodemd = p1.getNode() as SchemaNodeModel\r\n\r\n    //links[0].remove()\r\n\r\n    //this.getEngine().repaintCanvas()\r\n\r\n    //alert(nodemd.getOptions().name)\r\n    //console.log(p1)\r\n  }\r\n\r\n\r\n\r\n  initActions() {\r\n\r\n\r\n    let actions: Action[] = [\r\n      new DeleteAction(true),\r\n      new NewNodeAction(true),\r\n      new DuplicateAction(true),\r\n      new ClipboardAction(true)\r\n\r\n    ]\r\n\r\n    actions.forEach(Action =>\r\n      this.engine\r\n        .getActionEventBus()\r\n        .registerAction(Action),\r\n    );\r\n\r\n  }\r\n\r\n  fireAction(event: any) {\r\n    this.engine.getActionEventBus().fireAction({\r\n      event: {\r\n        ...event,\r\n        key: '',\r\n        preventDefault: () => { },\r\n        stopPropagation: () => { },\r\n      },\r\n    });\r\n  }\r\n\r\n\r\n  currentNode(): SchemaNodeModel | undefined {\r\n    let entities = this.engine\r\n      .getModel()\r\n      .getSelectedEntities()\r\n      .filter(model => !model.isLocked());\r\n\r\n    if (entities.length == 0) return undefined\r\n\r\n    let node = entities[0]\r\n\r\n    if (node instanceof SchemaNodeModel === false) return undefined\r\n\r\n    let rs = node as SchemaNodeModel\r\n\r\n    return rs\r\n  }\r\n\r\n  linktest() {\r\n    this.linkNode()\r\n  }\r\n\r\n  linkNode() {\r\n    let nodes = this.getEngine().getModel().getNodes() as SchemaNodeModel[]\r\n    alert(nodes[1].getOptions().name)\r\n    let sourcePort = nodes[0].getOutPorts()[0]\r\n    let targetPort = nodes[1].getInPorts()[0]\r\n\r\n\r\n    let link = sourcePort.link(targetPort)\r\n\r\n    targetPort.reportPosition()\r\n    sourcePort.reportPosition()\r\n\r\n    this.getEngine().getModel().addAll(link);\r\n    this.getEngine().repaintCanvas()\r\n  }\r\n\r\n  updateNodeName(e: string) {\r\n    let node = this.currentNode()\r\n    if (node == undefined) return\r\n    node.getOptions().name = e\r\n    this.getEngine().repaintCanvas()\r\n  }\r\n\r\n  linkModel(targetNodeId: string,\r\n    targetNodeField: string, mainNodeField: string,) {\r\n    let node = this.currentNode()\r\n    if (node == undefined) return\r\n    let targetNode = this.engine.getModel().getNode(targetNodeId) as SchemaNodeModel\r\n    let link = node.linkForeignKey(targetNode, targetNodeField, mainNodeField)\r\n    if (link == undefined) return\r\n    this.engine.getModel().addAll(link)\r\n    this.engine.repaintCanvas()\r\n  }\r\n\r\n  setCurrentNode(node: SchemaNodeModel) {\r\n    this.engine.repaintCanvas()\r\n  }\r\n\r\n  updateNode(tb: TableData) {\r\n    let node = this.currentNode()\r\n\r\n    if (node == undefined) return\r\n\r\n    node.updateNode(tb)\r\n\r\n    this.getEngine().repaintCanvas()\r\n\r\n  }\r\n\r\n  testEdit() {\r\n\r\n    let node = this.currentNode()\r\n\r\n    let tb = {\r\n      tablename: \"top\",\r\n      fields: [{\r\n        fieldName: \"Id\",\r\n        fieldType: \"int\"\r\n      }, {\r\n        fieldName: \"ProductId\",\r\n        fieldType: \"varchar\"\r\n      }, {\r\n        fieldName: \"Id\",\r\n        fieldType: \"int\"\r\n      }\r\n      ]\r\n    }\r\n\r\n    if (node == undefined) return\r\n\r\n    node.updateNode(tb)\r\n\r\n    this.getEngine().repaintCanvas()\r\n\r\n  }\r\n\r\n  doZoom(value : number){\r\n    let model = this.getEngine().getModel()\r\n    let zoomLevel = model.getZoomLevel()\r\n    console.log(zoomLevel)\r\n    model.setZoomLevel(zoomLevel + value)\r\n    this.getEngine().repaintCanvas()\r\n  }\r\n\r\n  updateFieldOption(f: Field) {\r\n    let node = this.currentNode()\r\n    if (node == undefined) return\r\n    node.addOrUpdateFieldOption(f)\r\n  }\r\n\r\n\r\n  copySelected = () => {\r\n    this.fireAction({ type: 'keydown', ctrlKey: true, code: 'KeyC' });\r\n\r\n  }\r\n\r\n  newNode() {\r\n    this.fireAction({ type: 'keydown', ctrlKey: true, code: 'KeyB' });\r\n  }\r\n\r\n  duplicateSelected = () => {\r\n    this.fireAction({ type: 'keydown', ctrlKey: true, code: 'KeyD' });\r\n  }\r\n\r\n  cutSelected = () =>\r\n    this.fireAction({ type: 'keydown', ctrlKey: true, code: 'KeyX' });\r\n\r\n\r\n  pasteSelected = () =>\r\n    this.fireAction({ type: 'keydown', ctrlKey: true, code: 'KeyV' });\r\n\r\n  deleteSelected = () =>\r\n    this.fireAction({ type: 'keydown', ctrlKey: true, code: 'Delete' });\r\n\r\n  undo = () =>\r\n    this.fireAction({ type: 'keydown', ctrlKey: true, code: 'KeyZ' });\r\n\r\n  zoomIn(event: any) {\r\n    this.fireAction({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      type: 'wheel',\r\n      deltaY: +1,\r\n    });\r\n  }\r\n\r\n  zoomOut(event: any) {\r\n    this.fireAction({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      type: 'wheel',\r\n      deltaY: -1,\r\n    });\r\n  }\r\n\r\n\r\n\r\n  getEngine(): DiagramEngine {\r\n    return this.engine\r\n  }\r\n\r\n\r\n\r\n}","F:\\Dev\\MyWebApp\\toper\\src\\DiagramController\\actions\\ClipboardAction.js",[],"F:\\Dev\\MyWebApp\\toper\\src\\components\\ContextMenus\\ContextMenus.tsx",[],"F:\\Dev\\MyWebApp\\toper\\src\\components\\ContextMenus\\ComponentContextMenu.tsx",[],"F:\\Dev\\MyWebApp\\toper\\src\\components\\ContextMenus\\DiagramContextMenu.tsx",[],"F:\\Dev\\MyWebApp\\toper\\src\\DiagramController\\actions\\DeleteAction.ts",["412"],"\nimport {Action, InputType, BaseModel } from '@projectstorm/react-canvas-core';\n\n\n/**\n * Handles delete actions.\n */\nexport default class DeleteAction extends Action {\n  constructor(areShortcutsAllowed : boolean) {\n    super({\n      type: InputType.KEY_DOWN,\n      fire: ({ event }) => {\n        console.log(JSON.stringify(event))\n        //if (!areShortcutsAllowed) return;\n        if (this.engine.getModel().isLocked()) return;\n        \n        if (this.matchesInput(event)) {\n          event.preventDefault();\n          this.handleAction();\n        }\n      },\n    });\n  }\n\n  matchesInput(event : any) : boolean{\n    return event.ctrlKey && event.code === 'Delete'\n  }\n\n  handleAction = () => {\n    console.log(\"delete\")\n    const entities = this.engine\n      .getModel()\n      .getSelectedEntities()\n      .filter(model => !model.isLocked());\n\n    //this.fireEvent(entities);\n\n    entities.forEach(model => model.remove());\n\n    this.engine.repaintCanvas();\n  };\n\n \n}\n","F:\\Dev\\MyWebApp\\toper\\src\\DiagramController\\actions\\NewNodeAction.ts",["413","414","415"],"import { DiagramModel, LinkModel, NodeModel } from '@projectstorm/react-diagrams';\r\n\r\nimport { Action, InputType } from '@projectstorm/react-canvas-core';\r\n\r\nimport {BaseModel} from '@projectstorm/react-canvas-core';\r\nimport { SchemaNodeModel } from '../../schemanode/node/SchemaNodeModel';\r\n\r\n/**\r\n * Handle duplication (clone) actions.\r\n */\r\nexport default class NewNodeAction extends Action {\r\n  constructor(areShortcutsAllowed : boolean) {\r\n    super({\r\n      type: InputType.KEY_DOWN,\r\n      fire: ({ event }) => {\r\n        if (!areShortcutsAllowed) return;\r\n        if (this.engine.getModel().isLocked()) return;\r\n\r\n        if (this.matchesInput(event)) {\r\n          event.preventDefault();\r\n          this.handleAction();\r\n        }\r\n      },\r\n    });\r\n  }\r\n\r\n  matchesInput(event : any) : boolean{\r\n    return event.ctrlKey && event.code === 'KeyB'\r\n  }\r\n\r\n  handleAction = () => {\r\n     \r\n    let snode =  new SchemaNodeModel({\r\n\t\tname: 'Product',\r\n\t\tcolor: 'rgb(0,192,255)'\r\n\t});\r\n    snode.addField({fieldName : \"Id\" , fieldType : \"int\"})\r\n\r\n    snode.setPosition(100, 100);\r\n\r\n    let model = this.engine.getModel() as DiagramModel\r\n\r\n    model.addAll(snode)\r\n\r\n    //this.engine.fireEvent({ nodes: clones }, 'componentsAdded');\r\n\r\n    this.engine.repaintCanvas();\r\n  };\r\n}\r\n","F:\\Dev\\MyWebApp\\toper\\src\\DiagramController\\actions\\DuplicateAction.ts",["416"],"import { DiagramModel, LinkModel, NodeModel } from '@projectstorm/react-diagrams';\n\nimport { Action, InputType } from '@projectstorm/react-canvas-core';\n\nimport {BaseModel} from '@projectstorm/react-canvas-core';\n\n/**\n * Handle duplication (clone) actions.\n */\nexport default class DuplicateAction extends Action {\n  constructor(areShortcutsAllowed : boolean) {\n    super({\n      type: InputType.KEY_DOWN,\n      fire: ({ event }) => {\n        if (!areShortcutsAllowed) return;\n        if (this.engine.getModel().isLocked()) return;\n\n        if (this.matchesInput(event)) {\n          event.preventDefault();\n          this.handleAction();\n        }\n      },\n    });\n  }\n\n  matchesInput(event : any) : boolean{\n    return event.ctrlKey && event.code === 'KeyD'\n  }\n\n  handleAction = () => {\n    const model = this.engine.getModel() as DiagramModel\n\n    const clones : BaseModel[] = model \n      .getSelectedEntities()\n      .filter(entity => entity instanceof BaseModel)\n      .filter(entity => !entity.isLocked())\n      .map(entity => entity.clone());\n\n    model.clearSelection();\n\n    clones.forEach(clone => {\n\n      if (clone instanceof NodeModel) {\n        model.addNode(clone)\n        clone.setSelected(true);\n      }\n      \n      \n    });\n\n    //this.engine.fireEvent({ nodes: clones }, 'componentsAdded');\n\n    this.engine.repaintCanvas();\n  };\n}\n","F:\\Dev\\MyWebApp\\toper\\src\\components\\ExportEditor.tsx",["417","418","419","420","421","422","423","424","425","426"],"import React, { FunctionComponent } from 'react'\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport clsx from 'clsx';\r\nimport TableMat from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport classes from '*.module.css';\r\nimport styled from '@emotion/styled';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nexport interface TableEditorProp{\r\n    isOpen : boolean,\r\n    onclose : () => void\r\n}\r\n\r\n\r\n\r\n\r\n  export const LEFT = styled.div<{}>`\r\nwidth : 30%;\r\nheight: 100vh;\r\ncolor : white;\r\nfont-size : 20px;\r\nbackground-color: #005AA0;\r\n`;\r\n\r\nexport const MenuList = styled.div<{}>`\r\n\r\ncolor : white;\r\n\r\npadding : 15px;\r\nmargin-bottom : 10px;\r\n`;\r\n\r\nexport const Menu = styled.div<{}>`\r\n\r\ncolor : white;\r\nfont-size : 15px;\r\nmargin : 8px;\r\n\r\n`;\r\n  \r\n\r\nexport const Right = styled.div<{}>`\r\nwidth : 70%;\r\nbackground-color: \"white\";\r\nmargin : 15px;\r\nfont-size : 20px;\r\n\r\n`;\r\n\r\n\r\ninterface ExportFunctions {\r\n  isOpen : boolean,\r\n  onclose : () => void,\r\n  exportPng : () => void,\r\n  exportPdf : () => void\r\n}\r\n\r\n\r\nexport class ExportEditor extends React.Component<ExportFunctions> {\r\n\r\n    \r\n\r\n    render() {\r\n        const r = `Create Table Product (\r\n                id int;\r\n                ProdutName varchar;\r\n                ProductPrice int;\r\n                Category int;\r\n                Primary key id\r\n            )\r\n            \r\n            //////////////////////////\r\n\r\n            Create Table ProductImage (\r\n                id int;\r\n                ProductId int\r\n                ImageUrl varchar\r\n                Primary key id\r\n            )\r\n        `\r\n        return (\r\n            <Drawer anchor={\"right\"} open={this.props.isOpen} style={{width : 400}} onClose={this.props.onclose}>\r\n               <div\r\n      style={{width : 500 , display : \"flex\"}}\r\n      role=\"presentation\"\r\n        className=\"\"\r\n    >\r\n   \r\n      <LEFT>\r\n          <IconButton color=\"inherit\" size=\"medium\"><HighlightOffIcon></HighlightOffIcon></IconButton>\r\n        <MenuList>\r\n            <Menu>Sql</Menu>\r\n            <Menu onClick={this.props.exportPng}>Image</Menu>\r\n            <Menu onClick={this.props.exportPdf}>Pdf</Menu>\r\n\r\n            <Divider style={{marginTop:10,color : \"white\"}} light={true}></Divider>\r\n\r\n            <Menu>Laravel</Menu>\r\n            <Menu>Golang Gin</Menu>\r\n\r\n        </MenuList>\r\n      </LEFT>\r\n      <Right>\r\n        <div>Export sql</div>\r\n        <TextField label=\"Filled\" variant=\"filled\" multiline\r\n          rowsMax={20} style={{marginTop:20,width:\"100%\",height:400}} value={r}></TextField>\r\n\r\n          <Button variant=\"outlined\" color=\"primary\" style={{marginRight:10}}>Copy</Button>\r\n          <Button variant=\"contained\" color=\"primary\" >Download</Button>\r\n      </Right>\r\n\r\n    </div>\r\n            </Drawer>\r\n        )\r\n    }\r\n}","F:\\Dev\\MyWebApp\\toper\\src\\DiagramController\\actions\\ZoomAction.ts",[],["427","428"],"F:\\Dev\\MyWebApp\\toper\\src\\DiagramController\\actions\\Clipboard.ts",["429","430","431"],"import { Action, InputType , DeserializeEvent } from '@projectstorm/react-canvas-core';\r\n\r\nimport {BaseModel} from '@projectstorm/react-canvas-core';\r\nimport { DiagramModel, NodeModel } from '@projectstorm/react-diagrams';\r\nimport Base from 'antd/lib/typography/Base';\r\nimport { SchemaNodeModel } from '../../schemanode/node/SchemaNodeModel';\r\n\r\n\r\n/**\r\n * Handles clipboard actions.\r\n */\r\nexport default class ClipboardAction extends Action {\r\n  constructor(areShortcutsAllowed : boolean) {\r\n    super({\r\n      type: InputType.KEY_DOWN,\r\n      fire: ({ event }) => {\r\n        if (!areShortcutsAllowed) return;\r\n        if (this.engine.getModel().isLocked()) return;\r\n\r\n        if (this.matchesInput(event)) {\r\n          event.preventDefault();\r\n\r\n          const e : any = event;\r\n          if (e.code === 'KeyX') this.handleCut();\r\n          if (e.code === 'KeyC') this.handleCopy();\r\n          if (e.code === 'KeyV') this.handlePaste();\r\n        }\r\n      },\r\n    });\r\n  }\r\n\r\n  matchesInput(event : any) : boolean{\r\n        return event.ctrlKey && (event.code === 'KeyX' || event.code === \"KeyC\" || \r\n        event.code === \"KeyV\")     \r\n  }\r\n\r\n  getSelectedComponents = () =>\r\n    this.engine\r\n      .getModel()\r\n      .getSelectedEntities()\r\n      .filter(entity => entity instanceof SchemaNodeModel)\r\n      .filter(entity => !entity.isLocked());\r\n\r\n  /** Cut */\r\n  handleCut() {\r\n    let selectNodes = this.getSelectedComponents() as SchemaNodeModel[]\r\n    let clonenode = selectNodes[0].clone()\r\n    const copie = clonenode.serialize()\r\n\r\n    localStorage.setItem('clipboard', JSON.stringify(copie));\r\n\r\n    selectNodes.forEach(model => model.remove());\r\n\r\n    this.engine.repaintCanvas();\r\n\r\n  };\r\n\r\n  /** Copy */\r\n  handleCopy() {\r\n    let selectNodes = this.getSelectedComponents() as SchemaNodeModel[]\r\n    let clonenode = selectNodes[0].clone()\r\n    const copie = clonenode.serialize()\r\n\r\n\r\n    console.log(copie)\r\n\r\n    localStorage.setItem('clipboard', JSON.stringify(copie));\r\n  };\r\n\r\n  onPromise(id : string) {\r\n    return new Promise<BaseModel>((resolve, reject) => {\r\n      let rs = new SchemaNodeModel()\r\n      resolve(rs);\r\n    });\r\n  }\r\n\r\n\r\n  /** Paste */\r\n  handlePaste() {\r\n\r\n\r\n    let clipboardstr = localStorage.getItem('clipboard')\r\n\r\n    if(clipboardstr == null) clipboardstr = \"\"\r\n\r\n    const clipboard = JSON.parse(clipboardstr);\r\n    if (!clipboard) return;\r\n\r\n    console.log(clipboard)\r\n\r\n\r\n    let pastemodel = new SchemaNodeModel()\r\n \r\n    let deserializeData : any = {\r\n      data : clipboard,\r\n      engine : this.engine,\r\n      registerModel: () => {},\r\n    }\r\n\r\n    pastemodel.deserialize(deserializeData)\r\n    \r\n  \r\n    pastemodel.setPosition(100, 100);\r\n\r\n    console.log(pastemodel)\r\n    let model = this.engine.getModel() as DiagramModel\r\n    model.addAll(pastemodel)\r\n\r\n\r\n    //this.engine.fireEvent( nodes: models , 'componentsAdded');\r\n\r\n    this.engine.repaintCanvas();\r\n  };\r\n\r\n\r\n\r\n\r\n  \r\n}\r\n","F:\\Dev\\MyWebApp\\toper\\src\\components\\ContextMenus\\SimpleContext.tsx",["432"],"import React , {FunctionComponent} from 'react';\r\n\r\nimport { Menu, Item, Separator } from 'react-contexify';\r\n\r\nimport { Redo, Undo, Paste, ZoomIn, ZoomOut } from '../Icons';\r\nimport Key from './KeyMenu';\r\nimport ContextMenuIconContainer from './ContextMenuIconContainer';\r\nimport ContextMenuShortcutContainer from './ContextMenuShortcutContainer';\r\n\r\nimport {ContextFunction} from './FunctionList'\r\n\r\n\r\nexport const SimpleContext : FunctionComponent = () => (\r\n  <Menu id=\"nodeedit\">\r\n  <Item>\r\n    <ContextMenuIconContainer>\r\n      <Paste />\r\n    </ContextMenuIconContainer>\r\n    Paste\r\n    <ContextMenuShortcutContainer>\r\n      <Key>CTRL</Key>\r\n      <Key>V</Key>\r\n    </ContextMenuShortcutContainer>\r\n  </Item>\r\n\r\n  <Separator />\r\n\r\n  <Item>\r\n    <ContextMenuIconContainer>\r\n      <ZoomIn />\r\n    </ContextMenuIconContainer>\r\n    Zoom in\r\n  </Item>\r\n  <Item>\r\n    <ContextMenuIconContainer>\r\n      <ZoomOut />\r\n    </ContextMenuIconContainer>\r\n    Zoom out\r\n  </Item>\r\n\r\n  <Separator />\r\n\r\n  <Item>\r\n    <ContextMenuIconContainer>\r\n      <Undo />\r\n    </ContextMenuIconContainer>\r\n    Undo\r\n    <ContextMenuShortcutContainer>\r\n      <Key>CTRL</Key>\r\n      <Key>Z</Key>\r\n    </ContextMenuShortcutContainer>\r\n  </Item>\r\n\r\n  <Item>\r\n    <ContextMenuIconContainer>\r\n      <Redo />\r\n    </ContextMenuIconContainer>\r\n    Redo\r\n    <ContextMenuShortcutContainer>\r\n      <Key>CTRL</Key>\r\n      <Key>SHIFT</Key>\r\n      <Key>Z</Key>\r\n    </ContextMenuShortcutContainer>\r\n  </Item>\r\n</Menu>\r\n);\r\n\r\nexport default SimpleContext;",{"ruleId":"433","severity":1,"message":"434","line":9,"column":10,"nodeType":"435","messageId":"436","endLine":9,"endColumn":18},{"ruleId":"433","severity":1,"message":"437","line":10,"column":8,"nodeType":"435","messageId":"436","endLine":10,"endColumn":13},{"ruleId":"438","replacedBy":"439"},{"ruleId":"440","replacedBy":"441"},{"ruleId":"438","replacedBy":"442"},{"ruleId":"440","replacedBy":"443"},{"ruleId":"438","replacedBy":"444"},{"ruleId":"440","replacedBy":"445"},{"ruleId":"446","severity":1,"message":"447","line":16,"column":8,"nodeType":"435","messageId":"436","endLine":16,"endColumn":13},{"ruleId":"446","severity":1,"message":"448","line":26,"column":24,"nodeType":"435","messageId":"436","endLine":26,"endColumn":35},{"ruleId":"446","severity":1,"message":"449","line":29,"column":9,"nodeType":"435","messageId":"436","endLine":29,"endColumn":19},{"ruleId":"446","severity":1,"message":"450","line":29,"column":22,"nodeType":"435","messageId":"436","endLine":29,"endColumn":29},{"ruleId":"446","severity":1,"message":"451","line":30,"column":22,"nodeType":"435","messageId":"436","endLine":30,"endColumn":27},{"ruleId":"446","severity":1,"message":"452","line":58,"column":10,"nodeType":"435","messageId":"436","endLine":58,"endColumn":24},{"ruleId":"453","severity":1,"message":"454","line":139,"column":85,"nodeType":"455","endLine":139,"endColumn":129},{"ruleId":"438","replacedBy":"456"},{"ruleId":"440","replacedBy":"457"},{"ruleId":"446","severity":1,"message":"458","line":4,"column":8,"nodeType":"435","messageId":"436","endLine":4,"endColumn":20},{"ruleId":"446","severity":1,"message":"459","line":6,"column":8,"nodeType":"435","messageId":"436","endLine":6,"endColumn":21},{"ruleId":"438","replacedBy":"460"},{"ruleId":"440","replacedBy":"461"},{"ruleId":"433","severity":1,"message":"462","line":17,"column":10,"nodeType":"435","messageId":"436","endLine":17,"endColumn":14},{"ruleId":"433","severity":1,"message":"463","line":29,"column":18,"nodeType":"435","messageId":"436","endLine":29,"endColumn":28},{"ruleId":"464","severity":1,"message":"465","line":42,"column":5,"nodeType":"466","endLine":42,"endColumn":7,"suggestions":"467"},{"ruleId":"433","severity":1,"message":"468","line":88,"column":11,"nodeType":"435","messageId":"436","endLine":88,"endColumn":19},{"ruleId":"433","severity":1,"message":"469","line":94,"column":11,"nodeType":"435","messageId":"436","endLine":94,"endColumn":20},{"ruleId":"433","severity":1,"message":"470","line":100,"column":11,"nodeType":"435","messageId":"436","endLine":100,"endColumn":20},{"ruleId":"433","severity":1,"message":"471","line":133,"column":11,"nodeType":"435","messageId":"436","endLine":133,"endColumn":19},{"ruleId":"433","severity":1,"message":"472","line":169,"column":11,"nodeType":"435","messageId":"436","endLine":169,"endColumn":21},{"ruleId":"473","severity":1,"message":"474","line":171,"column":16,"nodeType":"475","messageId":"476","endLine":171,"endColumn":18},{"ruleId":"433","severity":1,"message":"477","line":1,"column":24,"nodeType":"435","messageId":"436","endLine":1,"endColumn":40},{"ruleId":"433","severity":1,"message":"478","line":1,"column":42,"nodeType":"435","messageId":"436","endLine":1,"endColumn":58},{"ruleId":"433","severity":1,"message":"479","line":1,"column":92,"nodeType":"435","messageId":"436","endLine":1,"endColumn":114},{"ruleId":"433","severity":1,"message":"480","line":24,"column":9,"nodeType":"435","messageId":"436","endLine":24,"endColumn":22},{"ruleId":"433","severity":1,"message":"481","line":26,"column":9,"nodeType":"435","messageId":"436","endLine":26,"endColumn":18},{"ruleId":"438","replacedBy":"482"},{"ruleId":"440","replacedBy":"483"},{"ruleId":"433","severity":1,"message":"484","line":6,"column":8,"nodeType":"435","messageId":"436","endLine":6,"endColumn":14},{"ruleId":"433","severity":1,"message":"485","line":15,"column":10,"nodeType":"435","messageId":"436","endLine":15,"endColumn":18},{"ruleId":"486","severity":1,"message":"487","line":13,"column":15,"nodeType":"488","endLine":13,"endColumn":18},{"ruleId":"433","severity":1,"message":"489","line":7,"column":8,"nodeType":"435","messageId":"436","endLine":7,"endColumn":22},{"ruleId":"433","severity":1,"message":"490","line":8,"column":8,"nodeType":"435","messageId":"436","endLine":8,"endColumn":24},{"ruleId":"433","severity":1,"message":"491","line":9,"column":8,"nodeType":"435","messageId":"436","endLine":9,"endColumn":28},{"ruleId":"433","severity":1,"message":"492","line":20,"column":8,"nodeType":"435","messageId":"436","endLine":20,"endColumn":19},{"ruleId":"433","severity":1,"message":"493","line":23,"column":10,"nodeType":"435","messageId":"436","endLine":23,"endColumn":21},{"ruleId":"433","severity":1,"message":"448","line":23,"column":24,"nodeType":"435","messageId":"436","endLine":23,"endColumn":35},{"ruleId":"433","severity":1,"message":"494","line":2,"column":40,"nodeType":"435","messageId":"436","endLine":2,"endColumn":49},{"ruleId":"433","severity":1,"message":"477","line":5,"column":10,"nodeType":"435","messageId":"436","endLine":5,"endColumn":26},{"ruleId":"433","severity":1,"message":"495","line":5,"column":46,"nodeType":"435","messageId":"436","endLine":5,"endColumn":59},{"ruleId":"433","severity":1,"message":"496","line":68,"column":7,"nodeType":"435","messageId":"436","endLine":68,"endColumn":13},{"ruleId":"473","severity":1,"message":"474","line":76,"column":53,"nodeType":"475","messageId":"476","endLine":76,"endColumn":55},{"ruleId":"473","severity":1,"message":"474","line":78,"column":60,"nodeType":"475","messageId":"476","endLine":78,"endColumn":62},{"ruleId":"473","severity":1,"message":"474","line":80,"column":14,"nodeType":"475","messageId":"476","endLine":80,"endColumn":16},{"ruleId":"473","severity":1,"message":"497","line":82,"column":17,"nodeType":"475","messageId":"476","endLine":82,"endColumn":19},{"ruleId":"473","severity":1,"message":"497","line":104,"column":27,"nodeType":"475","messageId":"476","endLine":104,"endColumn":29},{"ruleId":"473","severity":1,"message":"497","line":107,"column":27,"nodeType":"475","messageId":"476","endLine":107,"endColumn":29},{"ruleId":"473","severity":1,"message":"474","line":151,"column":60,"nodeType":"475","messageId":"476","endLine":151,"endColumn":62},{"ruleId":"473","severity":1,"message":"474","line":152,"column":17,"nodeType":"475","messageId":"476","endLine":152,"endColumn":19},{"ruleId":"473","severity":1,"message":"474","line":154,"column":24,"nodeType":"475","messageId":"476","endLine":154,"endColumn":26},{"ruleId":"473","severity":1,"message":"474","line":160,"column":18,"nodeType":"475","messageId":"476","endLine":160,"endColumn":20},{"ruleId":"433","severity":1,"message":"498","line":162,"column":7,"nodeType":"435","messageId":"436","endLine":162,"endColumn":19},{"ruleId":"473","severity":1,"message":"474","line":162,"column":40,"nodeType":"475","messageId":"476","endLine":162,"endColumn":42},{"ruleId":"433","severity":1,"message":"499","line":163,"column":7,"nodeType":"435","messageId":"436","endLine":163,"endColumn":19},{"ruleId":"473","severity":1,"message":"474","line":163,"column":43,"nodeType":"475","messageId":"476","endLine":163,"endColumn":45},{"ruleId":"433","severity":1,"message":"500","line":164,"column":7,"nodeType":"435","messageId":"436","endLine":164,"endColumn":19},{"ruleId":"473","severity":1,"message":"474","line":164,"column":34,"nodeType":"475","messageId":"476","endLine":164,"endColumn":36},{"ruleId":"433","severity":1,"message":"501","line":188,"column":7,"nodeType":"435","messageId":"436","endLine":188,"endColumn":15},{"ruleId":"473","severity":1,"message":"474","line":211,"column":66,"nodeType":"475","messageId":"476","endLine":211,"endColumn":68},{"ruleId":"473","severity":1,"message":"474","line":215,"column":23,"nodeType":"475","messageId":"476","endLine":215,"endColumn":25},{"ruleId":"473","severity":1,"message":"474","line":229,"column":12,"nodeType":"475","messageId":"476","endLine":229,"endColumn":14},{"ruleId":"473","severity":1,"message":"474","line":230,"column":11,"nodeType":"475","messageId":"476","endLine":230,"endColumn":13},{"ruleId":"473","severity":1,"message":"474","line":334,"column":67,"nodeType":"475","messageId":"476","endLine":334,"endColumn":69},{"ruleId":"473","severity":1,"message":"474","line":336,"column":24,"nodeType":"475","messageId":"476","endLine":336,"endColumn":26},{"ruleId":"473","severity":1,"message":"474","line":366,"column":67,"nodeType":"475","messageId":"476","endLine":366,"endColumn":69},{"ruleId":"473","severity":1,"message":"474","line":367,"column":24,"nodeType":"475","messageId":"476","endLine":367,"endColumn":26},{"ruleId":"433","severity":1,"message":"502","line":2,"column":2,"nodeType":"435","messageId":"436","endLine":2,"endColumn":11},{"ruleId":"433","severity":1,"message":"503","line":4,"column":2,"nodeType":"435","messageId":"436","endLine":4,"endColumn":20},{"ruleId":"433","severity":1,"message":"504","line":9,"column":9,"nodeType":"435","messageId":"436","endLine":9,"endColumn":25},{"ruleId":"433","severity":1,"message":"505","line":10,"column":10,"nodeType":"435","messageId":"436","endLine":10,"endColumn":30},{"ruleId":"433","severity":1,"message":"506","line":10,"column":32,"nodeType":"435","messageId":"436","endLine":10,"endColumn":48},{"ruleId":"433","severity":1,"message":"507","line":4,"column":33,"nodeType":"435","messageId":"436","endLine":4,"endColumn":52},{"ruleId":"433","severity":1,"message":"508","line":7,"column":10,"nodeType":"435","messageId":"436","endLine":7,"endColumn":13},{"ruleId":"473","severity":1,"message":"474","line":85,"column":16,"nodeType":"475","messageId":"476","endLine":85,"endColumn":18},{"ruleId":"473","severity":1,"message":"497","line":112,"column":13,"nodeType":"475","messageId":"476","endLine":112,"endColumn":15},{"ruleId":"438","replacedBy":"509"},{"ruleId":"440","replacedBy":"510"},{"ruleId":"433","severity":1,"message":"511","line":4,"column":8,"nodeType":"435","messageId":"436","endLine":4,"endColumn":14},{"ruleId":"433","severity":1,"message":"512","line":5,"column":8,"nodeType":"435","messageId":"436","endLine":5,"endColumn":15},{"ruleId":"433","severity":1,"message":"513","line":7,"column":8,"nodeType":"435","messageId":"436","endLine":7,"endColumn":18},{"ruleId":"433","severity":1,"message":"514","line":8,"column":8,"nodeType":"435","messageId":"436","endLine":8,"endColumn":16},{"ruleId":"433","severity":1,"message":"515","line":10,"column":8,"nodeType":"435","messageId":"436","endLine":10,"endColumn":15},{"ruleId":"433","severity":1,"message":"516","line":14,"column":9,"nodeType":"435","messageId":"436","endLine":14,"endColumn":18},{"ruleId":"433","severity":1,"message":"517","line":17,"column":8,"nodeType":"435","messageId":"436","endLine":17,"endColumn":17},{"ruleId":"433","severity":1,"message":"495","line":20,"column":10,"nodeType":"435","messageId":"436","endLine":20,"endColumn":23},{"ruleId":"433","severity":1,"message":"518","line":20,"column":25,"nodeType":"435","messageId":"436","endLine":20,"endColumn":34},{"ruleId":"433","severity":1,"message":"519","line":60,"column":24,"nodeType":"435","messageId":"436","endLine":60,"endColumn":37},{"ruleId":"464","severity":1,"message":"520","line":72,"column":64,"nodeType":"466","endLine":72,"endColumn":86,"suggestions":"521"},{"ruleId":"464","severity":1,"message":"522","line":83,"column":8,"nodeType":"466","endLine":83,"endColumn":45,"suggestions":"523"},{"ruleId":"473","severity":1,"message":"474","line":92,"column":17,"nodeType":"475","messageId":"476","endLine":92,"endColumn":19},{"ruleId":"473","severity":1,"message":"474","line":112,"column":15,"nodeType":"475","messageId":"476","endLine":112,"endColumn":17},{"ruleId":"473","severity":1,"message":"474","line":149,"column":59,"nodeType":"475","messageId":"476","endLine":149,"endColumn":61},{"ruleId":"473","severity":1,"message":"474","line":151,"column":18,"nodeType":"475","messageId":"476","endLine":151,"endColumn":20},{"ruleId":"473","severity":1,"message":"497","line":155,"column":21,"nodeType":"475","messageId":"476","endLine":155,"endColumn":23},{"ruleId":"473","severity":1,"message":"474","line":176,"column":15,"nodeType":"475","messageId":"476","endLine":176,"endColumn":17},{"ruleId":"473","severity":1,"message":"474","line":183,"column":15,"nodeType":"475","messageId":"476","endLine":183,"endColumn":17},{"ruleId":"473","severity":1,"message":"474","line":197,"column":13,"nodeType":"475","messageId":"476","endLine":197,"endColumn":15},{"ruleId":"473","severity":1,"message":"474","line":199,"column":15,"nodeType":"475","messageId":"476","endLine":199,"endColumn":17},{"ruleId":"473","severity":1,"message":"474","line":210,"column":31,"nodeType":"475","messageId":"476","endLine":210,"endColumn":33},{"ruleId":"473","severity":1,"message":"474","line":212,"column":13,"nodeType":"475","messageId":"476","endLine":212,"endColumn":15},{"ruleId":"473","severity":1,"message":"474","line":218,"column":65,"nodeType":"475","messageId":"476","endLine":218,"endColumn":67},{"ruleId":"473","severity":1,"message":"474","line":222,"column":45,"nodeType":"475","messageId":"476","endLine":222,"endColumn":47},{"ruleId":"473","severity":1,"message":"474","line":222,"column":82,"nodeType":"475","messageId":"476","endLine":222,"endColumn":84},{"ruleId":"473","severity":1,"message":"474","line":223,"column":25,"nodeType":"475","messageId":"476","endLine":223,"endColumn":27},{"ruleId":"473","severity":1,"message":"474","line":223,"column":64,"nodeType":"475","messageId":"476","endLine":223,"endColumn":66},{"ruleId":"473","severity":1,"message":"474","line":226,"column":45,"nodeType":"475","messageId":"476","endLine":226,"endColumn":47},{"ruleId":"433","severity":1,"message":"524","line":231,"column":14,"nodeType":"435","messageId":"436","endLine":231,"endColumn":32},{"ruleId":"473","severity":1,"message":"474","line":233,"column":15,"nodeType":"475","messageId":"476","endLine":233,"endColumn":17},{"ruleId":"473","severity":1,"message":"474","line":234,"column":59,"nodeType":"475","messageId":"476","endLine":234,"endColumn":61},{"ruleId":"473","severity":1,"message":"474","line":236,"column":16,"nodeType":"475","messageId":"476","endLine":236,"endColumn":18},{"ruleId":"473","severity":1,"message":"474","line":239,"column":17,"nodeType":"475","messageId":"476","endLine":239,"endColumn":19},{"ruleId":"433","severity":1,"message":"525","line":241,"column":11,"nodeType":"435","messageId":"436","endLine":241,"endColumn":17},{"ruleId":"473","severity":1,"message":"474","line":264,"column":22,"nodeType":"475","messageId":"476","endLine":264,"endColumn":24},{"ruleId":"473","severity":1,"message":"474","line":267,"column":21,"nodeType":"475","messageId":"476","endLine":267,"endColumn":23},{"ruleId":"473","severity":1,"message":"474","line":268,"column":21,"nodeType":"475","messageId":"476","endLine":268,"endColumn":23},{"ruleId":"473","severity":1,"message":"474","line":274,"column":18,"nodeType":"475","messageId":"476","endLine":274,"endColumn":20},{"ruleId":"473","severity":1,"message":"474","line":278,"column":66,"nodeType":"475","messageId":"476","endLine":278,"endColumn":68},{"ruleId":"473","severity":1,"message":"474","line":281,"column":25,"nodeType":"475","messageId":"476","endLine":281,"endColumn":27},{"ruleId":"473","severity":1,"message":"474","line":283,"column":21,"nodeType":"475","messageId":"476","endLine":283,"endColumn":23},{"ruleId":"473","severity":1,"message":"474","line":286,"column":21,"nodeType":"475","messageId":"476","endLine":286,"endColumn":23},{"ruleId":"473","severity":1,"message":"474","line":315,"column":39,"nodeType":"475","messageId":"476","endLine":315,"endColumn":41},{"ruleId":"433","severity":1,"message":"526","line":1,"column":17,"nodeType":"435","messageId":"436","endLine":1,"endColumn":34},{"ruleId":"433","severity":1,"message":"527","line":3,"column":8,"nodeType":"435","messageId":"436","endLine":3,"endColumn":12},{"ruleId":"433","severity":1,"message":"528","line":4,"column":8,"nodeType":"435","messageId":"436","endLine":4,"endColumn":16},{"ruleId":"433","severity":1,"message":"529","line":5,"column":8,"nodeType":"435","messageId":"436","endLine":5,"endColumn":17},{"ruleId":"433","severity":1,"message":"530","line":6,"column":8,"nodeType":"435","messageId":"436","endLine":6,"endColumn":17},{"ruleId":"433","severity":1,"message":"531","line":7,"column":8,"nodeType":"435","messageId":"436","endLine":7,"endColumn":22},{"ruleId":"433","severity":1,"message":"532","line":8,"column":8,"nodeType":"435","messageId":"436","endLine":8,"endColumn":17},{"ruleId":"433","severity":1,"message":"533","line":9,"column":8,"nodeType":"435","messageId":"436","endLine":9,"endColumn":16},{"ruleId":"433","severity":1,"message":"534","line":10,"column":10,"nodeType":"435","messageId":"436","endLine":10,"endColumn":20},{"ruleId":"433","severity":1,"message":"535","line":11,"column":8,"nodeType":"435","messageId":"436","endLine":11,"endColumn":15},{"ruleId":"433","severity":1,"message":"536","line":68,"column":15,"nodeType":"435","messageId":"436","endLine":68,"endColumn":16},{"ruleId":"438","replacedBy":"439"},{"ruleId":"440","replacedBy":"441"},{"ruleId":"433","severity":1,"message":"537","line":2,"column":13,"nodeType":"435","messageId":"436","endLine":2,"endColumn":14},{"ruleId":"433","severity":1,"message":"538","line":9,"column":8,"nodeType":"435","messageId":"436","endLine":9,"endColumn":18},{"ruleId":"433","severity":1,"message":"539","line":34,"column":9,"nodeType":"435","messageId":"436","endLine":34,"endColumn":15},{"ruleId":"473","severity":1,"message":"474","line":88,"column":25,"nodeType":"475","messageId":"476","endLine":88,"endColumn":27},{"ruleId":"473","severity":1,"message":"474","line":121,"column":14,"nodeType":"475","messageId":"476","endLine":121,"endColumn":16},{"ruleId":"473","severity":1,"message":"474","line":129,"column":14,"nodeType":"475","messageId":"476","endLine":129,"endColumn":16},{"ruleId":"473","severity":1,"message":"474","line":132,"column":14,"nodeType":"475","messageId":"476","endLine":132,"endColumn":16},{"ruleId":"473","severity":1,"message":"474","line":144,"column":14,"nodeType":"475","messageId":"476","endLine":144,"endColumn":16},{"ruleId":"473","severity":1,"message":"474","line":171,"column":14,"nodeType":"475","messageId":"476","endLine":171,"endColumn":16},{"ruleId":"473","severity":1,"message":"474","line":189,"column":14,"nodeType":"475","messageId":"476","endLine":189,"endColumn":16},{"ruleId":"433","severity":1,"message":"516","line":2,"column":28,"nodeType":"435","messageId":"436","endLine":2,"endColumn":37},{"ruleId":"433","severity":1,"message":"502","line":1,"column":24,"nodeType":"435","messageId":"436","endLine":1,"endColumn":33},{"ruleId":"433","severity":1,"message":"518","line":1,"column":35,"nodeType":"435","messageId":"436","endLine":1,"endColumn":44},{"ruleId":"433","severity":1,"message":"516","line":5,"column":9,"nodeType":"435","messageId":"436","endLine":5,"endColumn":18},{"ruleId":"433","severity":1,"message":"502","line":1,"column":24,"nodeType":"435","messageId":"436","endLine":1,"endColumn":33},{"ruleId":"433","severity":1,"message":"526","line":1,"column":17,"nodeType":"435","messageId":"436","endLine":1,"endColumn":34},{"ruleId":"433","severity":1,"message":"527","line":3,"column":8,"nodeType":"435","messageId":"436","endLine":3,"endColumn":12},{"ruleId":"433","severity":1,"message":"528","line":4,"column":8,"nodeType":"435","messageId":"436","endLine":4,"endColumn":16},{"ruleId":"433","severity":1,"message":"529","line":5,"column":8,"nodeType":"435","messageId":"436","endLine":5,"endColumn":17},{"ruleId":"433","severity":1,"message":"530","line":6,"column":8,"nodeType":"435","messageId":"436","endLine":6,"endColumn":17},{"ruleId":"433","severity":1,"message":"531","line":7,"column":8,"nodeType":"435","messageId":"436","endLine":7,"endColumn":22},{"ruleId":"433","severity":1,"message":"532","line":8,"column":8,"nodeType":"435","messageId":"436","endLine":8,"endColumn":17},{"ruleId":"433","severity":1,"message":"533","line":9,"column":8,"nodeType":"435","messageId":"436","endLine":9,"endColumn":16},{"ruleId":"433","severity":1,"message":"534","line":10,"column":10,"nodeType":"435","messageId":"436","endLine":10,"endColumn":20},{"ruleId":"433","severity":1,"message":"535","line":11,"column":8,"nodeType":"435","messageId":"436","endLine":11,"endColumn":15},{"ruleId":"438","replacedBy":"540"},{"ruleId":"440","replacedBy":"541"},{"ruleId":"433","severity":1,"message":"506","line":1,"column":30,"nodeType":"435","messageId":"436","endLine":1,"endColumn":46},{"ruleId":"433","severity":1,"message":"518","line":4,"column":24,"nodeType":"435","messageId":"436","endLine":4,"endColumn":33},{"ruleId":"433","severity":1,"message":"542","line":5,"column":8,"nodeType":"435","messageId":"436","endLine":5,"endColumn":12},{"ruleId":"433","severity":1,"message":"543","line":10,"column":9,"nodeType":"435","messageId":"436","endLine":10,"endColumn":24},"@typescript-eslint/no-unused-vars","'Provider' is defined but never used.","Identifier","unusedVar","'store' is defined but never used.","no-native-reassign",["544"],"no-negated-in-lhs",["545"],["544"],["545"],["544"],["545"],"no-unused-vars","'Paper' is defined but never used.","'useSelector' is defined but never used.","'initEngine' is defined but never used.","'newNode' is defined but never used.","'Table' is defined but never used.","'getCurrentNode' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["544"],["545"],"'SchemaEditor' is defined but never used.","'SchemaReducer' is defined but never used.",["544"],["545"],"'Menu' is defined but never used.","'setDiagram' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'ToggleEditor' and 'diagram'. Either include them or remove the dependency array.","ArrayExpression",["546"],"'onZoomIn' is defined but never used.","'onZoomOut' is defined but never used.","'onZoomFit' is defined but never used.","'testLink' is defined but never used.","'loadSerial' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'DefaultLinkModel' is defined but never used.","'DefaultNodeModel' is defined but never used.","'PathFindingLinkFactory' is defined but never used.","'productIdPort' is assigned a value but never used.","'pnameport' is assigned a value but never used.",["544"],["545"],"'Button' is defined but never used.","'TabPanel' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'FormatBoldIcon' is defined but never used.","'FormatItalicIcon' is defined but never used.","'FormatUnderlinedIcon' is defined but never used.","'SelectInput' is defined but never used.","'useDispatch' is defined but never used.","'PortModel' is defined but never used.","'DiagramEngine' is defined but never used.","'fields' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'targetNodeId' is assigned a value but never used.","'targetPortId' is assigned a value but never used.","'sourceIdPort' is assigned a value but never used.","'portouts' is assigned a value but never used.","'LinkModel' is defined but never used.","'PortModelAlignment' is defined but never used.","'DefaultPortModel' is defined but never used.","'AbstractModelFactory' is defined but never used.","'DeserializeEvent' is defined but never used.","'GenerateWidgetEvent' is defined but never used.","'css' is defined but never used.",["544"],["545"],"'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'IconButton' is defined but never used.","'MenuIcon' is defined but never used.","'Divider' is defined but never used.","'BaseModel' is defined but never used.","'TextField' is defined but never used.","'NodeModel' is defined but never used.","'setotherTable' is assigned a value but never used.","React Hook useMemo has a missing dependency: 'loadTableFieldSelect'. Either include it or remove the dependency array.",["547"],"React Hook useEffect has missing dependencies: 'diagramctr' and 'getNodeData'. Either include them or remove the dependency array. If 'setTable' needs the current value of 'diagramctr', you can also switch to useReducer instead of useState and read 'diagramctr' in the reducer.",["548"],"'onSelectForeignKey' is defined but never used.","'option' is assigned a value but never used.","'FunctionComponent' is defined but never used.","'clsx' is defined but never used.","'TableMat' is defined but never used.","'TableBody' is defined but never used.","'TableCell' is defined but never used.","'TableContainer' is defined but never used.","'TableHead' is defined but never used.","'TableRow' is defined but never used.","'makeStyles' is defined but never used.","'classes' is defined but never used.","'r' is assigned a value but never used.","'_' is defined but never used.","'ZoomAction' is defined but never used.","'models' is assigned a value but never used.",["544"],["545"],"'Base' is defined but never used.","'ContextFunction' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"549","fix":"550"},{"desc":"551","fix":"552"},{"desc":"553","fix":"554"},"Update the dependencies array to be: [ToggleEditor, diagram]",{"range":"555","text":"556"},"Update the dependencies array to be: [loadTableFieldSelect]",{"range":"557","text":"558"},"Update the dependencies array to be: [isOpen, toggleUpdate, forceUpdate, getNodeData, diagramctr]",{"range":"559","text":"560"},[1320,1322],"[ToggleEditor, diagram]",[2279,2301],"[loadTableFieldSelect]",[2591,2628],"[isOpen, toggleUpdate, forceUpdate, getNodeData, diagramctr]"]