[{"F:\\Dev\\MyWebApp\\toper\\src\\index.tsx":"1","F:\\Dev\\MyWebApp\\toper\\src\\BodyWidget.tsx":"2","F:\\Dev\\MyWebApp\\toper\\src\\components\\CanvasDiagram.tsx":"3","F:\\Dev\\MyWebApp\\toper\\src\\defaultData\\defaultScheme.js":"4","F:\\Dev\\MyWebApp\\toper\\src\\components\\NavbarEditor.tsx":"5","F:\\Dev\\MyWebApp\\toper\\src\\components\\SchemaEditor.js":"6","F:\\Dev\\MyWebApp\\toper\\src\\libs\\schemaEditorReducer.ts":"7","F:\\Dev\\MyWebApp\\toper\\src\\store.js":"8","F:\\Dev\\MyWebApp\\toper\\src\\libs\\schemeReduce.ts":"9","F:\\Dev\\MyWebApp\\toper\\src\\App.tsx":"10","F:\\Dev\\MyWebApp\\toper\\src\\libs\\engine.ts":"11","F:\\Dev\\MyWebApp\\toper\\src\\libs\\tablereducer.ts":"12","F:\\Dev\\MyWebApp\\toper\\src\\libs\\dummyreducer.ts":"13","F:\\Dev\\MyWebApp\\toper\\src\\custom-node-ts\\TSCustomNodeModel.ts":"14","F:\\Dev\\MyWebApp\\toper\\src\\components\\Appbar.tsx":"15","F:\\Dev\\MyWebApp\\toper\\src\\components\\TabMat.tsx":"16","F:\\Dev\\MyWebApp\\toper\\src\\components\\TabMenu.tsx":"17","F:\\Dev\\MyWebApp\\toper\\src\\components\\Toolbar.tsx":"18","F:\\Dev\\MyWebApp\\toper\\src\\schemanode\\node\\SchemaNodeModel.ts":"19","F:\\Dev\\MyWebApp\\toper\\src\\schemanode\\port\\SchemaPortModel.ts":"20","F:\\Dev\\MyWebApp\\toper\\src\\schemanode\\node\\SchemaNodeFactory.tsx":"21","F:\\Dev\\MyWebApp\\toper\\src\\schemanode\\node\\SchemaNodeWidget.tsx":"22","F:\\Dev\\MyWebApp\\toper\\src\\schemanode\\port\\SchemaPortLabelWidget.tsx":"23"},{"size":558,"mtime":1612756802746,"results":"24","hashOfConfig":"25"},{"size":388,"mtime":1612249709457,"results":"26","hashOfConfig":"25"},{"size":1283,"mtime":1612765034635,"results":"27","hashOfConfig":"25"},{"size":187,"mtime":1612323376670,"results":"28","hashOfConfig":"25"},{"size":1623,"mtime":1612765898942,"results":"29","hashOfConfig":"25"},{"size":4362,"mtime":1612676179331,"results":"30","hashOfConfig":"25"},{"size":1462,"mtime":1612542986411,"results":"31","hashOfConfig":"25"},{"size":368,"mtime":1612544460601,"results":"32","hashOfConfig":"25"},{"size":3515,"mtime":1612537668494,"results":"33","hashOfConfig":"25"},{"size":696,"mtime":1612765694199,"results":"34","hashOfConfig":"25"},{"size":2111,"mtime":1612800849486,"results":"35","hashOfConfig":"25"},{"size":2372,"mtime":1612583364079,"results":"36","hashOfConfig":"25"},{"size":472,"mtime":1612544493216,"results":"37","hashOfConfig":"25"},{"size":877,"mtime":1612576686001,"results":"38","hashOfConfig":"25"},{"size":1193,"mtime":1612675333027,"results":"39","hashOfConfig":"25"},{"size":2131,"mtime":1612713948794,"results":"40","hashOfConfig":"25"},{"size":985,"mtime":1612695004123,"results":"41","hashOfConfig":"25"},{"size":2394,"mtime":1612758297678,"results":"42","hashOfConfig":"25"},{"size":3684,"mtime":1612801259179,"results":"43","hashOfConfig":"25"},{"size":863,"mtime":1612801116217,"results":"44","hashOfConfig":"25"},{"size":693,"mtime":1612789792934,"results":"45","hashOfConfig":"25"},{"size":2375,"mtime":1612793941592,"results":"46","hashOfConfig":"25"},{"size":1113,"mtime":1612793853129,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},"1qj6m5i",{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"51"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"51"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"51"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"51"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"51"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"51"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},"F:\\Dev\\MyWebApp\\toper\\src\\index.tsx",["108","109"],"\n\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport  {NavEditor}  from './components/NavbarEditor';\nimport SchemaEditor from './components/SchemaEditor'\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport {App} from './App'\nimport TabEditor from './components/TabMenu'\nimport ToolbarEditor from './components/Toolbar'\nReactDOM.render(\n  <Provider store={store}>\n    <NavEditor></NavEditor>\n    <ToolbarEditor></ToolbarEditor>\n    <App/>\n  </Provider>\n\n,\n  document.getElementById('root')\n);\n\n",["110","111"],"F:\\Dev\\MyWebApp\\toper\\src\\BodyWidget.tsx",[],["112","113"],"F:\\Dev\\MyWebApp\\toper\\src\\components\\CanvasDiagram.tsx",[],"F:\\Dev\\MyWebApp\\toper\\src\\defaultData\\defaultScheme.js",[],"F:\\Dev\\MyWebApp\\toper\\src\\components\\NavbarEditor.tsx",[],"F:\\Dev\\MyWebApp\\toper\\src\\components\\SchemaEditor.js",["114","115","116","117","118","119","120"],"import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport TableMat from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport TableChartIcon from '@material-ui/icons/TableChart';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\r\n\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\n\r\n\r\nimport { useDispatch , useSelector } from \"react-redux\"\r\nimport Tabmat from './TabMat'\r\nimport Appbar from './Appbar'\r\nimport {initEngine , newNode} from '../libs/schemeReduce'\r\nimport {OpenEditor , Table , NewNode} from '../libs/tablereducer'\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  list: {\r\n    width: 500,\r\n  },\r\n  fullList: {\r\n    width: 'auto',\r\n  },\r\n});\r\n\r\nfunction createData(Name, TypeName, PK, FK) {\r\n  return { Name, TypeName, PK, FK };\r\n}\r\n\r\nconst rows = [\r\n  createData('Product Id', \"varchar\", false, false),\r\n  createData('Product Name', \"varchar\", false , false),\r\n  createData('Product Price', \"int\", false , false),\r\n\r\n];\r\n\r\n//const engine = useSelector(\r\n  //  (state: RootState) => state.schemeReducer.engine\r\n  //);\r\n\r\n\r\nfunction getCurrentNode(){\r\n\r\n}\r\n\r\n\r\nexport default function TemporaryDrawer() {\r\n  const dispatch = useDispatch()\r\n  const classes = useStyles();\r\n  const [state, setState] = React.useState({\r\n    top: false,\r\n    left: false,\r\n    bottom: false,\r\n    right: false,\r\n  });\r\n\r\n  const tableform = {\r\n    table_name : \"\",\r\n    node_id : \"\",\r\n    fields : []\r\n  }\r\n\r\n\r\n  //const [state, setstate] = useState()\r\n\r\n  //const currentSelect = useSelector(state => state.schemaEditor.isOpen)\r\nconst currentSelect = false\r\n\r\n  const toggleDrawer = (anchor, open) => (event) => {\r\n    console.log(\"toggle\")\r\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n      return;\r\n    }\r\n\r\n    setState({ ...state, [anchor]: open });\r\n  };\r\n\r\n  const list = (anchor) => (\r\n    <div\r\n      className={clsx(classes.list, {\r\n        [classes.fullList]: anchor === 'top' || anchor === 'bottom',\r\n      })}\r\n      role=\"presentation\"\r\n      onClick={toggleDrawer(anchor, false)}\r\n      onKeyDown={toggleDrawer(anchor, false)}\r\n    >\r\n      <Appbar></Appbar>\r\n       <TableContainer>\r\n      <TableMat aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Field Name</TableCell>\r\n            <TableCell>Type Name</TableCell>\r\n            <TableCell>PK</TableCell>\r\n            <TableCell>FK</TableCell>\r\n\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.map((row) => (\r\n            <TableRow key={row.name}>\r\n              {(row) ? <TableCell component=\"th\" scope=\"row\"> {row.Name}\r\n              </TableCell> : <div>Edit</div>} \r\n               \r\n              \r\n              <TableCell >{row.TypeName}</TableCell>\r\n              <TableCell >{row.PK}</TableCell>\r\n              <TableCell >{row.FK}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </TableMat>\r\n    </TableContainer>\r\n    <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\r\n          <AddCircleOutlineIcon />\r\n        </IconButton>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <Tabmat></Tabmat>\r\n      <Button onClick={toggleDrawer(\"right\", true)}  startIcon={<TableChartIcon />} onClick={() => dispatch(NewNode(tableform))}>New Table</Button>\r\n      <Button startIcon={<SaveIcon />}>Save File</Button>\r\n      <Button startIcon={<ArrowDownwardIcon />} onClick={() => dispatch(OpenEditor(true))}>Export {currentSelect}</Button>\r\n      <Button startIcon={<ShareIcon />} >Share File</Button>\r\n          <Drawer anchor={\"right\"} open={false} onClose={()=> dispatch(OpenEditor(true))}>\r\n            {list(\"right\")}\r\n          </Drawer>\r\n\r\n    </div>\r\n \r\n  );\r\n}",["121","122"],"F:\\Dev\\MyWebApp\\toper\\src\\libs\\schemaEditorReducer.ts",[],"F:\\Dev\\MyWebApp\\toper\\src\\store.js",["123","124"],"import { configureStore } from '@reduxjs/toolkit';\r\n\r\n\r\nimport SchemaEditor from './libs/schemaEditorReducer'\r\n\r\nimport SchemaReducer from './libs/schemeReduce'\r\nimport TableReducer from './libs/tablereducer'\r\nimport Dummay from './libs/dummyreducer'\r\nexport default configureStore({\r\n  reducer: {\r\n    \r\n    dummy : Dummay,\r\n    tablereducer : TableReducer\r\n  },\r\n});",["125","126"],"F:\\Dev\\MyWebApp\\toper\\src\\libs\\schemeReduce.ts",["127","128","129","130","131"],"import createEngine , { DiagramModel , DefaultNodeModel , DefaultLinkModel, DiagramEngine} from '@projectstorm/react-diagrams'\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport {engine} from '../libs/engine'\r\nexport interface Field{\r\n  field_name : String\r\n  type_name : String,\r\n\r\n  pk ?: Boolean,\r\n  fk_table ?: String,\r\n  fk_field ?: String\r\n}\r\n\r\nexport interface UpdateData<T> {\r\n  id : String,\r\n  value : T\r\n}\r\n\r\nexport interface Table {\r\n  table_name : String,\r\n  fields : Field[]\r\n}\r\n\r\nexport interface SchemaData {\r\n  //engine ?: DiagramEngine,\r\n  currentSelect : String,\r\n  isOpen : Boolean,\r\n  tables : Table[]\r\n}\r\n\r\n\r\n\r\nexport const initialState : SchemaData = {\r\n  currentSelect: \"\",\r\n  isOpen : false,\r\n  tables : [\r\n    {\r\n    table_name : \"product\",\r\n    fields : [\r\n      {field_name : \"id\" , type_name : \"int\", pk : true },\r\n      {field_name : \"product_name\", type_name : \"varchar\",}\r\n    ]\r\n  },\r\n  {\r\n    table_name : \"product_image\",\r\n    fields : [\r\n      {field_name : \"id\" , type_name : \"int\" , pk : true},\r\n      {field_name : \"product_id\" , type_name : \"int\" , fk_table : \"product\" , fk_field : \"id\"},\r\n      {field_name : \"url\" , type_name : \"varchar\"}\r\n    ]\r\n  }]\r\n}\r\n\r\nexport const schemaSlice = createSlice({\r\n  name: 'schema',\r\n  initialState,\r\n  reducers: {\r\n    initEngine:(state)=>{\r\n      console.log(\"fff\")\r\n      console.log(\"fff\")\r\n      console.log(engine.getModel().getID())\r\n      \r\n      //engine.getModel().getc\r\n      //state.engine = engine\r\n    },\r\n    testNode:(state)=>{\r\n      console.log(\"test\")\r\n      //console.log(engine.getModel().getSelectionEntities())\r\n    },\r\n    newNode:(state , action : PayloadAction<String>)=>{\r\n      console.log(\"new node\")\r\n      const name = action.payload.toString()\r\n      const node =  new DefaultNodeModel(name , 'rgb(0,192,255)');\r\n      node.addInPort(\"user_id\")\r\n      node.addOutPort(\"int\")\r\n      node.setPosition(50, 50);\r\n      engine.getModel().addNode(node)\r\n      \r\n      engine.repaintCanvas()\r\n    },\r\n    addNode:(state , action : PayloadAction<Table>)=>{\r\n      let tb_name = action.payload.table_name.toString()\r\n      let node = new DefaultNodeModel(tb_name , 'rgb(0,192,255)')\r\n      node.setPosition(50, 50);\r\n      action.payload.fields.forEach(field => {\r\n          let fname = field.field_name.toString()\r\n          let tname = field.type_name.toString()\r\n          node.addOutPort(fname)\r\n          node.addInPort(tname)\r\n      });\r\n      engine.getModel().addNode(node)\r\n      engine.repaintCanvas()\r\n    },\r\n    updateNode:(state , action : PayloadAction<UpdateData<Table>>)=>{\r\n      let id = action.payload.id.toString()\r\n      let tb = action.payload.value\r\n      let tb_name = tb.table_name.toString()\r\n      let node = new DefaultNodeModel(tb_name , 'rgb(0,192,255)')\r\n      tb.fields.forEach(field => {\r\n          let fname = field.field_name.toString()\r\n          node.addOutPort(fname)\r\n      });\r\n\r\n      let cnode = engine.getModel().getNode(id)\r\n      cnode = node\r\n      engine.repaintCanvas()\r\n    },\r\n    deleteNode:(state , action : PayloadAction<String>)=>{\r\n      let cnode = engine.getModel().getNode(action.payload.toString())\r\n      engine.getModel().removeNode(cnode)\r\n      engine.repaintCanvas()\r\n    },\r\n\r\n\r\n  },\r\n})\r\n\r\nexport const {\r\n    testNode,\r\n    newNode,\r\n    addNode,\r\n    updateNode,\r\n    deleteNode,\r\n    initEngine\r\n} = schemaSlice.actions\r\n\r\n//export const getSchema = (state : SchemaData) => state.engine\r\n\r\nexport default schemaSlice.reducer;","F:\\Dev\\MyWebApp\\toper\\src\\App.tsx",["132","133","134","135","136"],"import React , {FunctionComponent , useEffect} from 'react'\r\n\r\nimport { useSelector , useDispatch } from \"react-redux\"\r\nimport { RootState } from './rootReducer';\r\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\r\n\r\nimport { DemoCanvasWidget } from './components/CanvasDiagram';\r\n\r\nimport {engine} from './libs/engine'\r\n\r\nexport interface DemoCanvasWidgetProps {\r\n\tcolor?: string;\r\n\tbackground?: string;\r\n}\r\n\r\nexport class App extends React.Component<DemoCanvasWidgetProps> {\r\n\r\n\trender() {\r\n\r\n    \r\n\t\treturn (\r\n\t\t\t<DemoCanvasWidget background=\"#FFFFFF\" color=\"#808080\">\r\n        <CanvasWidget engine={engine} className=\"canvas\" />\r\n      </DemoCanvasWidget>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n","F:\\Dev\\MyWebApp\\toper\\src\\libs\\engine.ts",["137","138"],"F:\\Dev\\MyWebApp\\toper\\src\\libs\\tablereducer.ts",["139","140"],"//import createEngine , { DiagramModel , DefaultNodeModel , DefaultLinkModel, DiagramEngine} from '@projectstorm/react-diagrams'\r\nimport { DefaultNodeModel } from '@projectstorm/react-diagrams'\r\nimport { createSlice , PayloadAction } from '@reduxjs/toolkit'\r\n//import createEngine , { DiagramModel , DefaultNodeModel , DefaultLinkModel, DiagramEngine} from '@projectstorm/react-diagrams'\r\nimport {engine} from '../libs/engine'\r\n\r\nexport interface Field{\r\n    field_name : String\r\n    type_name : String,\r\n  \r\n    pk ?: Boolean,\r\n    fk_table ?: String,\r\n    fk_field ?: String\r\n  }\r\n  \r\n  export interface UpdateData<T> {\r\n    id : String,\r\n    value : T\r\n  }\r\n  \r\n  export interface Table {\r\n    table_name : String,\r\n    node_id : String,\r\n    fields : Field[]\r\n  }\r\n  \r\n\r\n\r\n\r\nexport interface TableData {\r\n tt : String\r\n openstate : Boolean,\r\n currentSelect : String,\r\n tables : Table[]\r\n}\r\n\r\nexport const initialState : TableData = {\r\n    tt : \"\",\r\n    openstate : false,\r\n    currentSelect : \"\",\r\n    tables : []\r\n}\r\n\r\nexport const TableReducer = createSlice({\r\n  name: 'tablereducer',\r\n  initialState,\r\n  reducers: {\r\n    NewNode : (state , action : PayloadAction<Table>)=>{\r\n      const node1 = new DefaultNodeModel('Node 2', 'rgb(192,255,0)');\r\n      node1.setPosition(400, 100);\r\n      engine.getModel().addNode(node1)\r\n      engine.repaintCanvas()\r\n    },\r\n    OpenEditor: (state, action : PayloadAction<Boolean>) => {\r\n      console.log(\"toggle : \"+ action.payload)\r\n      let selectnodes = engine.getModel().getSelectedEntities()\r\n      if(selectnodes.length == 0) return\r\n      let nodeid = selectnodes[0].getID()\r\n      console.log(\"open : \"+nodeid)\r\n      state.openstate = true\r\n      state.currentSelect = nodeid\r\n      //let schema = FindSchemaByNodeId(nodeid)\r\n      //LoadFormEditor(schema)\r\n    },\r\n\r\n    \r\n\r\n  },\r\n})\r\n\r\nexport const {\r\n    NewNode,\r\n    OpenEditor,\r\n\r\n} = TableReducer.actions\r\n\r\nexport function FindSchemaById(id : string , tables : Table[]) : Table{\r\n    let indexof = tables.findIndex(t=>t.node_id === id)\r\n    let tb : Table = {\r\n        table_name : \"\",\r\n        node_id : \"\",\r\n        fields : []\r\n    }\r\n    if(indexof != -1){\r\n        tb = tables[indexof]\r\n    }\r\n    return tb\r\n}\r\n\r\nexport const teststr = (state : TableData) : String => {\r\n    //console.log(state)\r\n    return \"uuu\"\r\n}\r\nexport default TableReducer.reducer;","F:\\Dev\\MyWebApp\\toper\\src\\libs\\dummyreducer.ts",[],"F:\\Dev\\MyWebApp\\toper\\src\\custom-node-ts\\TSCustomNodeModel.ts",[],"F:\\Dev\\MyWebApp\\toper\\src\\components\\Appbar.tsx",[],["141","142"],"F:\\Dev\\MyWebApp\\toper\\src\\components\\TabMat.tsx",["143"],"F:\\Dev\\MyWebApp\\toper\\src\\components\\TabMenu.tsx",["144"],"F:\\Dev\\MyWebApp\\toper\\src\\components\\Toolbar.tsx",["145","146","147","148"],"import React from 'react';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport Redo from '@material-ui/icons/Redo';\r\nimport Undo from '@material-ui/icons/Undo';\r\nimport FileCopy from '@material-ui/icons/FileCopy';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormatBoldIcon from '@material-ui/icons/FormatBold';\r\nimport FormatItalicIcon from '@material-ui/icons/FormatItalic';\r\nimport FormatUnderlinedIcon from '@material-ui/icons/FormatUnderlined';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport LaunchIcon from '@material-ui/icons/Launch';\r\nimport PrintIcon from '@material-ui/icons/Print';\r\nimport ZoomInIcon from '@material-ui/icons/ZoomIn';\r\nimport ZoomOutIcon from '@material-ui/icons/ZoomOut';\r\nimport BookmarksIcon from '@material-ui/icons/Bookmarks';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport TableChartIcon from '@material-ui/icons/TableChart';\r\nimport Select from '@material-ui/core/Select';\r\nimport SelectInput from '@material-ui/core/Select/SelectInput';\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n\r\n      border: `1px solid ${theme.palette.divider}`,\r\n      borderRadius: theme.shape.borderRadius,\r\n      backgroundColor: theme.palette.background.paper,\r\n      color: theme.palette.text.secondary,\r\n      '& svg': {\r\n        margin: theme.spacing(1.0),\r\n      },\r\n      '& hr': {\r\n        margin: theme.spacing(0, 0.5),\r\n      },\r\n    },\r\n  }),\r\n);\r\n\r\nexport default function VerticalDividers() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      <Grid container alignItems=\"center\" className={classes.root}>\r\n          <TableChartIcon></TableChartIcon>\r\n          <LaunchIcon></LaunchIcon>\r\n          <FileCopy></FileCopy>\r\n          <PrintIcon></PrintIcon>\r\n          <Divider orientation=\"vertical\" flexItem />\r\n        <Redo />\r\n        <Undo />\r\n        <Divider orientation=\"vertical\" flexItem />\r\n        <Select>\r\n        <MenuItem value={\"50%\"}>50%</MenuItem>\r\n          <MenuItem value={\"75%\"}>75%</MenuItem>\r\n          <MenuItem value={\"100%\"}>100%</MenuItem>\r\n        </Select>\r\n        <ZoomInIcon />\r\n        <ZoomOutIcon />\r\n        <Divider orientation=\"vertical\" flexItem />\r\n        <BookmarksIcon></BookmarksIcon>\r\n        <DeleteIcon></DeleteIcon>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}","F:\\Dev\\MyWebApp\\toper\\src\\schemanode\\node\\SchemaNodeModel.ts",["149"],"F:\\Dev\\MyWebApp\\toper\\src\\schemanode\\port\\SchemaPortModel.ts",["150","151","152","153","154"],"F:\\Dev\\MyWebApp\\toper\\src\\schemanode\\node\\SchemaNodeFactory.tsx",["155"],"import * as React from 'react';\r\nimport { SchemaNodeModel } from './SchemaNodeModel';\r\nimport { SchemaNodeWidget } from './SchemaNodeWidget';\r\nimport { AbstractReactFactory , GenerateWidgetEvent } from '@projectstorm/react-canvas-core';\r\nimport { DiagramEngine } from '@projectstorm/react-diagrams-core';\r\n\r\nexport class SchemaNodeFactory extends AbstractReactFactory<SchemaNodeModel, DiagramEngine> {\r\n\r\n\tconstructor() {\r\n\t\tsuper('default');\r\n\t}\r\n\r\n\tgenerateReactWidget(event : any): JSX.Element {\r\n\t\treturn (\r\n\t\t\t<SchemaNodeWidget engine={this.engine} node={event.model}  />\r\n\t\t\t)\r\n\t}\r\n\r\n\tgenerateModel(initialConfig : any) {\r\n\t\treturn new SchemaNodeModel('Node 2', 'rgb(192,255,0)');\r\n\t}\r\n}","F:\\Dev\\MyWebApp\\toper\\src\\schemanode\\node\\SchemaNodeWidget.tsx",["156","157"],"import * as React from 'react';\r\nimport * as _ from 'lodash';\r\nimport { DiagramEngine } from '@projectstorm/react-diagrams-core';\r\nimport { SchemaNodeModel } from './SchemaNodeModel';\r\nimport { SchemaPortLabel } from '../port/SchemaPortLabelWidget';\r\nimport styled from '@emotion/styled';\r\nimport { css } from '@emotion/core';\r\nimport { SchemaPortModel } from '../port/SchemaPortModel';\r\nimport { Button } from '@material-ui/core';\r\n\r\n\r\n\texport const Node = styled.div<{ background ?: string; selected: boolean }>`\r\n\t\tbackground-color: ${(p) => p.background};\r\n\t\tborder-radius: 5px;\r\n\t\tfont-family: sans-serif;\r\n\t\tcolor: white;\r\n\t\tborder: solid 2px black;\r\n\t\toverflow: visible;\r\n\t\tfont-size: 11px;\r\n\t\tborder: solid 2px ${(p) => (p.selected ? 'rgb(0,192,255)' : 'black')};\r\n\t`;\r\n\r\n\texport const Title = styled.div`\r\n\t\tbackground: rgba(0, 0, 0, 0.3);\r\n\t\tdisplay: flex;\r\n\t\twhite-space: nowrap;\r\n\t\tjustify-items: center;\r\n\t`;\r\n\r\n\texport const TitleName = styled.div`\r\n\t\tflex-grow: 1;\r\n\t\tpadding: 5px 5px;\r\n\t`;\r\n\r\n\texport const Ports = styled.div`\r\n\t\tdisplay: flex;\r\n\t\tbackground-image: linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.2));\r\n\t`;\r\n\r\n\texport const PortsContainer = styled.div`\r\n\t\tflex-grow: 1;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\t&:first-of-type {\r\n\t\t\tmargin-right: 10px;\r\n\t\t}\r\n\t\t&:only-child {\r\n\t\t\tmargin-right: 0px;\r\n\t\t}\r\n\t`;\r\n\r\n\r\nexport interface DefaultNodeProps {\r\n\tnode: SchemaNodeModel;\r\n\tengine: DiagramEngine;\r\n}\r\n\r\n/**\r\n * Default node that models the DefaultNodeModel. It creates two columns\r\n * for both all the input ports on the left, and the output ports on the right.\r\n */\r\n\r\nexport class SchemaNodeWidget extends React.Component<DefaultNodeProps> {\r\n\tgeneratePort = (port : SchemaPortModel) => {\r\n\t\treturn <SchemaPortLabel engine={this.props.engine} port={port} key={port.getID()} />;\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Node\r\n\t\t\t\tdata-default-node-name={this.props.node.getOptions().name}\r\n\t\t\t\tselected={this.props.node.isSelected()}\r\n\t\t\t\tbackground={this.props.node.getOptions().color}>\r\n\t\t\t\t<Title>\r\n\t\t\t\t\t<TitleName>{this.props.node.getOptions().name}</TitleName>\r\n\t\t\t\t\t\r\n\t\t\t\t</Title>\r\n\t\t\t\t<Ports>\r\n\t\t\t\t\t<PortsContainer>{_.map(this.props.node.getInPorts(), this.generatePort)}</PortsContainer>\r\n\t\t\t\t\t<PortsContainer>{_.map(this.props.node.getOutPorts(), this.generatePort)}</PortsContainer>\r\n\t\t\t\t</Ports>\r\n\t\t\t</Node>\r\n\t\t);\r\n\t}\r\n}","F:\\Dev\\MyWebApp\\toper\\src\\schemanode\\port\\SchemaPortLabelWidget.tsx",[],{"ruleId":"158","severity":1,"message":"159","line":9,"column":8,"nodeType":"160","messageId":"161","endLine":9,"endColumn":20},{"ruleId":"158","severity":1,"message":"162","line":13,"column":8,"nodeType":"160","messageId":"161","endLine":13,"endColumn":17},{"ruleId":"163","replacedBy":"164"},{"ruleId":"165","replacedBy":"166"},{"ruleId":"163","replacedBy":"167"},{"ruleId":"165","replacedBy":"168"},{"ruleId":"169","severity":1,"message":"170","line":16,"column":8,"nodeType":"160","messageId":"161","endLine":16,"endColumn":13},{"ruleId":"169","severity":1,"message":"171","line":26,"column":24,"nodeType":"160","messageId":"161","endLine":26,"endColumn":35},{"ruleId":"169","severity":1,"message":"172","line":29,"column":9,"nodeType":"160","messageId":"161","endLine":29,"endColumn":19},{"ruleId":"169","severity":1,"message":"173","line":29,"column":22,"nodeType":"160","messageId":"161","endLine":29,"endColumn":29},{"ruleId":"169","severity":1,"message":"174","line":30,"column":22,"nodeType":"160","messageId":"161","endLine":30,"endColumn":27},{"ruleId":"169","severity":1,"message":"175","line":58,"column":10,"nodeType":"160","messageId":"161","endLine":58,"endColumn":24},{"ruleId":"176","severity":1,"message":"177","line":139,"column":85,"nodeType":"178","endLine":139,"endColumn":129},{"ruleId":"163","replacedBy":"179"},{"ruleId":"165","replacedBy":"180"},{"ruleId":"169","severity":1,"message":"159","line":4,"column":8,"nodeType":"160","messageId":"161","endLine":4,"endColumn":20},{"ruleId":"169","severity":1,"message":"181","line":6,"column":8,"nodeType":"160","messageId":"161","endLine":6,"endColumn":21},{"ruleId":"163","replacedBy":"164"},{"ruleId":"165","replacedBy":"166"},{"ruleId":"158","severity":1,"message":"182","line":1,"column":8,"nodeType":"160","messageId":"161","endLine":1,"endColumn":20},{"ruleId":"158","severity":1,"message":"183","line":1,"column":25,"nodeType":"160","messageId":"161","endLine":1,"endColumn":37},{"ruleId":"158","severity":1,"message":"184","line":1,"column":59,"nodeType":"160","messageId":"161","endLine":1,"endColumn":75},{"ruleId":"158","severity":1,"message":"185","line":1,"column":77,"nodeType":"160","messageId":"161","endLine":1,"endColumn":90},{"ruleId":"158","severity":1,"message":"186","line":104,"column":7,"nodeType":"160","messageId":"161","endLine":104,"endColumn":12},{"ruleId":"158","severity":1,"message":"187","line":1,"column":17,"nodeType":"160","messageId":"161","endLine":1,"endColumn":34},{"ruleId":"158","severity":1,"message":"188","line":1,"column":37,"nodeType":"160","messageId":"161","endLine":1,"endColumn":46},{"ruleId":"158","severity":1,"message":"171","line":3,"column":10,"nodeType":"160","messageId":"161","endLine":3,"endColumn":21},{"ruleId":"158","severity":1,"message":"189","line":3,"column":24,"nodeType":"160","messageId":"161","endLine":3,"endColumn":35},{"ruleId":"158","severity":1,"message":"190","line":4,"column":10,"nodeType":"160","messageId":"161","endLine":4,"endColumn":19},{"ruleId":"158","severity":1,"message":"189","line":2,"column":10,"nodeType":"160","messageId":"161","endLine":2,"endColumn":21},{"ruleId":"158","severity":1,"message":"191","line":3,"column":9,"nodeType":"160","messageId":"161","endLine":3,"endColumn":21},{"ruleId":"192","severity":1,"message":"193","line":57,"column":29,"nodeType":"194","messageId":"195","endLine":57,"endColumn":31},{"ruleId":"192","severity":1,"message":"196","line":84,"column":16,"nodeType":"194","messageId":"195","endLine":84,"endColumn":18},{"ruleId":"163","replacedBy":"179"},{"ruleId":"165","replacedBy":"180"},{"ruleId":"158","severity":1,"message":"197","line":15,"column":10,"nodeType":"160","messageId":"161","endLine":15,"endColumn":18},{"ruleId":"198","severity":1,"message":"199","line":13,"column":15,"nodeType":"200","endLine":13,"endColumn":18},{"ruleId":"158","severity":1,"message":"201","line":7,"column":8,"nodeType":"160","messageId":"161","endLine":7,"endColumn":22},{"ruleId":"158","severity":1,"message":"202","line":8,"column":8,"nodeType":"160","messageId":"161","endLine":8,"endColumn":24},{"ruleId":"158","severity":1,"message":"203","line":9,"column":8,"nodeType":"160","messageId":"161","endLine":9,"endColumn":28},{"ruleId":"158","severity":1,"message":"204","line":20,"column":8,"nodeType":"160","messageId":"161","endLine":20,"endColumn":19},{"ruleId":"158","severity":1,"message":"205","line":2,"column":40,"nodeType":"160","messageId":"161","endLine":2,"endColumn":49},{"ruleId":"158","severity":1,"message":"206","line":2,"column":2,"nodeType":"160","messageId":"161","endLine":2,"endColumn":11},{"ruleId":"158","severity":1,"message":"207","line":4,"column":2,"nodeType":"160","messageId":"161","endLine":4,"endColumn":20},{"ruleId":"158","severity":1,"message":"208","line":9,"column":9,"nodeType":"160","messageId":"161","endLine":9,"endColumn":25},{"ruleId":"158","severity":1,"message":"209","line":10,"column":10,"nodeType":"160","messageId":"161","endLine":10,"endColumn":30},{"ruleId":"158","severity":1,"message":"210","line":10,"column":32,"nodeType":"160","messageId":"161","endLine":10,"endColumn":48},{"ruleId":"158","severity":1,"message":"211","line":4,"column":33,"nodeType":"160","messageId":"161","endLine":4,"endColumn":52},{"ruleId":"158","severity":1,"message":"212","line":7,"column":10,"nodeType":"160","messageId":"161","endLine":7,"endColumn":13},{"ruleId":"158","severity":1,"message":"213","line":9,"column":10,"nodeType":"160","messageId":"161","endLine":9,"endColumn":16},"@typescript-eslint/no-unused-vars","'SchemaEditor' is defined but never used.","Identifier","unusedVar","'TabEditor' is defined but never used.","no-native-reassign",["214"],"no-negated-in-lhs",["215"],["214"],["215"],"no-unused-vars","'Paper' is defined but never used.","'useSelector' is defined but never used.","'initEngine' is defined but never used.","'newNode' is defined but never used.","'Table' is defined but never used.","'getCurrentNode' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["214"],["215"],"'SchemaReducer' is defined but never used.","'createEngine' is defined but never used.","'DiagramModel' is defined but never used.","'DefaultLinkModel' is defined but never used.","'DiagramEngine' is defined but never used.","'cnode' is assigned a value but never used.","'FunctionComponent' is defined but never used.","'useEffect' is defined but never used.","'useDispatch' is defined but never used.","'RootState' is defined but never used.","'ToggleEditor' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'TabPanel' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'FormatBoldIcon' is defined but never used.","'FormatItalicIcon' is defined but never used.","'FormatUnderlinedIcon' is defined but never used.","'SelectInput' is defined but never used.","'PortModel' is defined but never used.","'LinkModel' is defined but never used.","'PortModelAlignment' is defined but never used.","'DefaultPortModel' is defined but never used.","'AbstractModelFactory' is defined but never used.","'DeserializeEvent' is defined but never used.","'GenerateWidgetEvent' is defined but never used.","'css' is defined but never used.","'Button' is defined but never used.","no-global-assign","no-unsafe-negation"]